/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {


//var DEBUGLEX = function(msg) {};
var DEBUGLEX = console.log;
yy.value = null;
DEBUGLEX("STATE: ",YY_START);
DEBUGLEX("TEXT: ",yy_.yytext);




var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin('comment'); DEBUGLEX("BEGINCOMMENT "); return 'BEGINCOMMENT'; 
break;
case 1: DEBUGLEX("TEXT COMMENT ", yy_.yytext); /*node*/ return 'TEXT'; 
break;
case 2: this.popState(); DEBUGLEX("ENDCOMMENT "); return 'ENDCOMMENT'; 
break;
case 3: DEBUGLEX("NEWLINE\n"); return 'NEWLINE'; 
break;
case 4: DEBUGLEX("NEWLINE\n"); return 'NEWLINE'; 
break;
case 5: /* ignore this one */ DEBUGLEX("<13> "); 
break;
case 6: DEBUGLEX("PRELINE "); return 'PRELINE'; 
break;
case 7: this.begin('table'); DEBUGLEX("TABLEBEGIN ");   yy.value = yy_.yyleng-2;       return 'TABLEBEGIN';    
break;
case 8: DEBUGLEX("TABLECELL1 (tablecell that starts with | is ommited");    yy.value = 2*(yy_.yyleng-2);   return 'TABLECELL';     
break;
case 9: DEBUGLEX("TABLEHEAD ");    yy.value = 2*(yy_.yyleng-2);   return 'TABLEHEAD';     
break;
case 10: DEBUGLEX("TABLEHEAD ");    yy.value = 2*(yy_.yyleng-1)+1; return 'TABLEHEAD';     
break;
case 11: DEBUGLEX("TABLECAPTION "); yy.value = yy_.yyleng-2;       return 'TABLECAPTION';  
break;
case 12: DEBUGLEX("TABLEROW ");     yy.value = encodeTableRowInfo (yy_.yytext, yy_.yyleng); return 'TABLEROW'; 
break;
case 13: this.popState(); DEBUGLEX("TABLEEND "); return 'TABLEEND'; 
break;
case 14: this.begin('link'); DEBUGLEX("OPENLINK "); return 'OPENLINK'; 
break;
case 15: this.begin('link'); DEBUGLEX("OPENDBLSQBR "); return 'OPENDBLSQBR'; 
break;
case 16: this.less(yy_.yytext.length-1); DEBUGLEX("TEXT(%s) ", yy_.yytext);  return 'TEXT'; 
break;
case 17: this.popState(); DEBUGLEX("CLOSEDBLSQBR "); return 'CLOSEDBLSQBR'; 
break;
case 18: DEBUGLEX("PIPE "); return 'PIPE'; 
break;
case 19:return 'OPENSQBR';
break;
case 20:return 'CLOSESQBR';
break;
case 21: this.begin('template'); DEBUGLEX("OPENTEMPLATE "); return 'OPENTEMPLATE'; 
break;
case 22: 
    this.less(yy_.yytext.length-1);
    DEBUGLEX("ATTRIBUTE(%s) ", yy_.yytext); 
    return 'ATTRIBUTE'; 
    
break;
case 23:this.popState(); return 'PIPE';
break;
case 24:return 'PIPE';
break;
case 25: this.begin('templateargvalue');  return 'EQUALS';
break;
case 26:
    DEBUGLEX("TEXT(%s) ", yy_.yytext); 
    return 'TEXT'; 
    
break;
case 27: this.begin('templateargvalueQ');  return 'ATTRQ'; 
break;
case 28: this.popState();this.popState();  return 'ATTRQ'; 
break;
case 29: this.begin('templateargvalueAPO');  return 'ATTRAPO'; 
break;
case 30: this.popState();this.popState();  return 'ATTRAPO'; 
break;
case 31: return 'TEXT'; 
break;
case 32: return 'TEXT'; 
break;
case 33: this.popState(); return 'TEXT'; 
break;
case 34: this.popState(); DEBUGLEX("CLOSETEMPLATE "); return 'CLOSETEMPLATE'; 
break;
case 35: 
        if (YYSTATE!='list')
            this.begin('list'); 
        DEBUGLEX("LISTBULLET "); 
        return 'LISTBULLET'; 
break;
case 36: 
            if (YYSTATE!='list')
                this.begin('list'); 
            DEBUGLEX("LISTNUMBERED "); 
            return 'LISTNUMBERED'; 
break;
case 37: 
    if (YYSTATE!='list')
        this.begin('list'); 

    DEBUGLEX("LISTIDENT "); 
    return 'LISTIDENT'; 
break;
case 38:
        this.popState();
        yy.value = this.matches[1].length
        DEBUGLEX("ENDHEADING(%d) ", yy.value);
        return 'ENDHEADING';
                                
break;
case 39: this.less(yy_.yytext.length-1); DEBUGLEX("TEXT(%s) ", yy_.yytext);  return 'TEXT'; 
break;
case 40:
        this.begin('heading');
        yy.value = yy_.yytext.length;
        DEBUGLEX("HEADING(%d) ", yy.value);
        return 'HEADING';

break;
case 41: DEBUGLEX("TEXT(%s) ", yy_.yytext); return 'TEXT'; 
break;
}
},
rules: [/^(?:<!--)/,/^(?:[^-][^-]*)/,/^(?:-->)/,/^(?:\n)/,/^(?:^ *\n)/,/^(?:\r)/,/^(?:^ )/,/^(?:\{\| *)/,/^(?:\|\| *)/,/^(?:!! *)/,/^(?:^! *)/,/^(?:\|\+ *)/,/^(?:\|-+ *)/,/^(?:\|\})/,/^(?:\[\[:)/,/^(?:\[\[)/,/^(?:[^\n\]]+\])/,/^(?:\]\])/,/^(?:\|)/,/^(?:\[)/,/^(?:\])/,/^(?:\{\{)/,/^(?:[^=\}\|]+=)/,/^(?:\|)/,/^(?:\|)/,/^(?:=)/,/^(?:[^=\}\|]+)/,/^(?:")/,/^(?:")/,/^(?:')/,/^(?:')/,/^(?:[^\"]+)/,/^(?:[^\']+)/,/^(?:[^\}\|]+)/,/^(?:\}\})/,/^(?:^\*[ \t]*)/,/^(?:^#[ \t]*)/,/^(?:^:[ \t]*)/,/^(?:(=+) *\r?\n)/,/^(?:[^\n=]+=)/,/^(?:^=+)/,/^(?:^[^=]?[^\[\{\n]+)/],
conditions: {"comment":{"rules":[1,2],"inclusive":false},"link":{"rules":[16,17,18],"inclusive":false},"heading":{"rules":[38,39],"inclusive":false},"templateargvalueQ":{"rules":[28,31],"inclusive":false},"templateargvalueAPO":{"rules":[30,32],"inclusive":false},"table":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,19,20,21,35,36,37,40,41],"inclusive":true},"list":{"rules":[0,3,4,5,6,7,14,15,19,20,21,35,36,37,40,41],"inclusive":true},"template":{"rules":[0,3,4,5,6,7,14,15,19,20,21,22,24,25,26,34,35,36,37,40,41],"inclusive":true},"templateargvalue":{"rules":[0,3,4,5,6,7,14,15,19,20,21,23,27,29,33,35,36,37,40,41],"inclusive":true},"INITIAL":{"rules":[0,3,4,5,6,7,14,15,19,20,21,35,36,37,40,41],"inclusive":true}}
});
/*moduleInclude*/;
return lexer;
})();
exports.lexer = lexer;
exports.lex = function () { return lexer.lex.apply(lexer, arguments); };