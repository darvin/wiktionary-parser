/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,20],$V2=[1,25],$V3=[1,4],$V4=[1,26],$V5=[1,27],$V6=[1,31],$V7=[1,50],$V8=[1,51],$V9=[1,30],$Va=[1,52],$Vb=[1,32],$Vc=[1,33],$Vd=[1,34],$Ve=[1,18],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,40],$Vk=[1,41],$Vl=[1,35],$Vm=[1,28],$Vn=[1,29],$Vo=[1,42],$Vp=[1,43],$Vq=[1,44],$Vr=[1,53],$Vs=[1,54],$Vt=[1,55],$Vu=[1,19],$Vv=[1,56],$Vw=[1,17,21,30,32,33,34,36,38,42,43,45,47,49,51,55,58,60,64,66,67,70,71,72,83,84,85,86,90,91,92,94],$Vx=[1,17,21,30,33,34,36,38,42,43,45,47,49,51,55,58,60,64,66,67,70,71,72,83,84,85,86,90,91,92,94],$Vy=[2,309],$Vz=[1,17,21,30,33,34],$VA=[1,64],$VB=[2,177],$VC=[1,17,21,30,32,33,34],$VD=[2,167],$VE=[1,81],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,80],$VJ=[2,68],$VK=[1,17,19,21,30,32,33,34,36,38,42,43,45,47,49,51,55,58,60,64,66,67,70,71,72,73,74,83,84,85,86,90,91,92,94,95],$VL=[1,17,21,32,36,38,42,43,45,47,49,51,55,58,60,64,66,67,70,71,72,83,84,85,86,90,91,92,94],$VM=[2,41],$VN=[1,93],$VO=[1,94],$VP=[1,95],$VQ=[1,103],$VR=[1,102],$VS=[1,119],$VT=[1,104],$VU=[1,105],$VV=[1,106],$VW=[1,107],$VX=[1,108],$VY=[1,109],$VZ=[1,110],$V_=[1,100],$V$=[1,101],$V01=[1,111],$V11=[1,112],$V21=[1,113],$V31=[1,125],$V41=[1,124],$V51=[1,141],$V61=[1,126],$V71=[1,127],$V81=[1,128],$V91=[1,129],$Va1=[1,130],$Vb1=[1,131],$Vc1=[1,132],$Vd1=[1,122],$Ve1=[1,123],$Vf1=[1,133],$Vg1=[1,134],$Vh1=[1,135],$Vi1=[1,147],$Vj1=[1,146],$Vk1=[1,148],$Vl1=[1,149],$Vm1=[1,150],$Vn1=[1,151],$Vo1=[1,152],$Vp1=[1,153],$Vq1=[1,154],$Vr1=[1,144],$Vs1=[1,145],$Vt1=[1,155],$Vu1=[1,156],$Vv1=[1,157],$Vw1=[2,170],$Vx1=[2,171],$Vy1=[2,172],$Vz1=[1,166],$VA1=[1,167],$VB1=[1,168],$VC1=[1,170],$VD1=[1,171],$VE1=[1,172],$VF1=[1,173],$VG1=[1,174],$VH1=[1,175],$VI1=[1,176],$VJ1=[1,169],$VK1=[1,164],$VL1=[1,165],$VM1=[1,177],$VN1=[1,178],$VO1=[1,179],$VP1=[1,211],$VQ1=[1,210],$VR1=[1,194],$VS1=[1,193],$VT1=[1,195],$VU1=[1,196],$VV1=[1,197],$VW1=[1,199],$VX1=[1,200],$VY1=[1,201],$VZ1=[1,202],$V_1=[1,203],$V$1=[1,204],$V02=[1,198],$V12=[1,191],$V22=[1,192],$V32=[1,213],$V42=[2,310],$V52=[1,17,21,30,32,33,34,36,38,42,43,45,47,49,51,55,70,71,72,83,84,85,86,90,91,92,94],$V62=[1,224],$V72=[1,226],$V82=[1,227],$V92=[1,225],$Va2=[1,17,21,30,33,34,36,38,42,43,45,47,49,51,55,58,70,71,72,83,84,85,86,90,91,92,94],$Vb2=[1,17,21,30,32,33,34,36,38,42,43,45,47,49,51,55,58,60,64,66,67,70,72,83,84,85,86,90,91,92,94],$Vc2=[2,137],$Vd2=[1,230],$Ve2=[1,17,21,30,33,34,36,38,42,43,45,47,49,51,55,58,60,67,71,72,83,84,85,86,90,91,92,94],$Vf2=[2,113],$Vg2=[1,234],$Vh2=[1,17,21,30,32,33,34,36,38,42,43,45,47,49,51,55,58,60,67,70,71,72,83,84,85,86,90,91,92,94],$Vi2=[1,38,58,60,64,66,67],$Vj2=[1,253],$Vk2=[1,252],$Vl2=[1,254],$Vm2=[1,255],$Vn2=[1,256],$Vo2=[1,248],$Vp2=[1,257],$Vq2=[1,250],$Vr2=[1,251],$Vs2=[1,258],$Vt2=[1,259],$Vu2=[1,260],$Vv2=[1,17,21,30,32,33,34,38,55,58,60,64,66,67],$Vw2=[1,17,19,21,30,32,33,34,36,38,40,42,43,45,47,49,51,55,58,60,64,66,67,70,71,72,73,74,83,84,85,86,90,91,92,94,95],$Vx2=[1,17,21,32],$Vy2=[1,276],$Vz2=[1,277],$VA2=[1,278],$VB2=[1,17,19,21,30,32,33,34,38,40,51,71,73,74,95],$VC2=[1,17,19,21,30,32,33,34,38,40,47,51,71,73,74,95],$VD2=[1,17,19,21,30,32,33,34,38,40,49,51,71,73,74,95],$VE2=[1,17,19,21,30,32,33,34,38,40,47,49,51,71,73,74,95],$VF2=[1,17,19,21,30,32,33,34,38,40,73,74,95],$VG2=[1,298],$VH2=[2,290],$VI2=[1,17,21,30,33,34,36,38,42,43,45,47,49,51,55,58,60,67,70,71,72,83,84,85,86,90,91,92,94],$VJ2=[1,38,58,60,64,66,67,70],$VK2=[1,32,38,58,60,64,66,67,70],$VL2=[1,17,21,30,33,34,38,55,58,60,64,66,67,70],$VM2=[2,250],$VN2=[1,17,21,30,32,33,34,38,55,58,60,64,66,67,70],$VO2=[1,337],$VP2=[1,339],$VQ2=[1,17,19,21,30,32,33,34,38,40,43,73,74,95],$VR2=[1,17,19,21,30,32,33,34,38,40,42,45,47,49,51,55,58,60,64,66,67,70,71,72,73,74,83,84,85,86,90,91,92,94,95],$VS2=[43,86],$VT2=[1,17,19,21,30,32,33,34,36,38,40,43,73,74,95];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"article":3,"oneormorenewlines":4,"blocks":5,"block":6,"blocksintbl":7,"blockintbl":8,"preblock":9,"heading":10,"zeroormorenewlines":11,"listblock":12,"paragraph":13,"table":14,"comment":15,"paragraphintbl":16,"HEADING":17,"text":18,"ENDHEADING":19,"preline":20,"PRELINE":21,"textorempty":22,"zeroormorenewlinessave":23,"bulletlistblock":24,"numberlistblock":25,"identlistblock":26,"bulletlistline":27,"numberlistline":28,"identlistline":29,"LISTBULLET":30,"listseries":31,"NEWLINE":32,"LISTNUMBERED":33,"LISTIDENT":34,"linktrail":35,"CLOSEDBLSQBR":36,"externallink":37,"OPENSQBR":38,"textinlink":39,"CLOSESQBR":40,"linketc":41,"OPENDBLSQBR":42,"PIPE":43,"pipeseries":44,"OPENLINK":45,"italicsorbold":46,"APO2":47,"textnoital":48,"APO3":49,"textnoboit":50,"APO5":51,"textnobold":52,"italicsnobold":53,"boldnoitalics":54,"TABLEBEGIN":55,"attributes":56,"tablerows":57,"TABLEEND":58,"tablerow":59,"TABLEROW":60,"tablecells":61,"tablecaption":62,"tablecell":63,"TABLECELL":64,"tablecellcontents":65,"TABLEHEAD":66,"TABLECAPTION":67,"textintbl":68,"attribute":69,"ATTRIBUTE":70,"EQUALS":71,"TEXT":72,"ATTRAPO":73,"ATTRQ":74,"textelement":75,"textelementnoital":76,"textelementnobold":77,"textelementnoboit":78,"textelementintbl":79,"textelementinlink":80,"textintmpl":81,"textelementintmpl":82,"EXTENSION":83,"CLOSEPENTUPLECURLY":84,"CLOSETEMPLATEVAR":85,"CLOSETEMPLATE":86,"template":87,"templatevar":88,"templateargs":89,"OPENTEMPLATE":90,"OPENTEMPLATEVAR":91,"OPENPENTUPLECURLY":92,"oneormorenewlinessave":93,"BEGINCOMMENT":94,"ENDCOMMENT":95,"$accept":0,"$end":1},
terminals_: {2:"error",17:"HEADING",19:"ENDHEADING",21:"PRELINE",30:"LISTBULLET",32:"NEWLINE",33:"LISTNUMBERED",34:"LISTIDENT",36:"CLOSEDBLSQBR",38:"OPENSQBR",40:"CLOSESQBR",42:"OPENDBLSQBR",43:"PIPE",45:"OPENLINK",47:"APO2",49:"APO3",51:"APO5",55:"TABLEBEGIN",58:"TABLEEND",60:"TABLEROW",64:"TABLECELL",66:"TABLEHEAD",67:"TABLECAPTION",70:"ATTRIBUTE",71:"EQUALS",72:"TEXT",73:"ATTRAPO",74:"ATTRQ",83:"EXTENSION",84:"CLOSEPENTUPLECURLY",85:"CLOSETEMPLATEVAR",86:"CLOSETEMPLATE",90:"OPENTEMPLATE",91:"OPENTEMPLATEVAR",92:"OPENPENTUPLECURLY",94:"BEGINCOMMENT",95:"ENDCOMMENT"},
productions_: [0,[3,0],[3,1],[3,1],[5,1],[5,2],[7,1],[7,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[8,1],[8,2],[8,2],[8,2],[8,2],[8,2],[10,3],[10,2],[10,1],[9,1],[9,2],[20,3],[12,1],[12,1],[12,1],[24,1],[24,2],[25,1],[25,2],[26,1],[26,2],[27,4],[27,3],[28,4],[28,3],[29,4],[29,3],[31,0],[31,1],[31,1],[31,1],[31,2],[31,2],[31,2],[35,1],[37,3],[41,3],[41,4],[41,4],[41,5],[41,3],[41,4],[41,4],[41,5],[41,2],[41,3],[41,3],[41,4],[41,2],[41,3],[41,3],[41,4],[44,2],[44,3],[22,0],[22,1],[46,3],[46,5],[46,4],[46,2],[46,3],[46,5],[46,4],[46,3],[46,2],[46,3],[46,5],[46,4],[46,3],[46,5],[46,4],[46,3],[46,2],[53,3],[53,2],[54,3],[54,2],[14,4],[14,3],[14,5],[14,4],[14,3],[14,2],[14,4],[14,3],[14,3],[14,4],[14,3],[14,2],[57,1],[57,2],[59,3],[59,2],[59,4],[59,3],[59,1],[59,3],[59,2],[59,2],[59,1],[59,1],[61,1],[61,2],[63,4],[63,2],[63,4],[63,3],[63,2],[63,1],[63,4],[63,2],[63,4],[63,3],[63,2],[63,1],[65,1],[65,2],[62,4],[62,3],[62,2],[62,3],[62,2],[62,1],[69,1],[69,3],[69,5],[69,5],[69,4],[69,2],[56,1],[56,2],[18,1],[18,2],[48,1],[48,2],[52,1],[52,2],[50,1],[50,2],[68,1],[68,2],[39,1],[39,2],[81,1],[81,2],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[89,2],[89,3],[89,5],[89,5],[89,1],[87,3],[88,3],[88,3],[88,2],[88,2],[11,0],[11,1],[4,1],[4,2],[23,0],[23,1],[93,1],[93,2],[13,2],[13,3],[13,1],[13,2],[16,2],[16,3],[16,1],[16,2],[15,3],[15,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 debugf ("article#1 "); this.$ = [articlenode = newNode ('Article')]; 
break;
case 2:
 debugf ("article#2 "); this.$ = articlenode = newNode ('Article'); 
break;
case 3:
 debugf ("article#3 "); this.$ = articlenode = nodeAddChild (newNode ('Article'), $$[$0]); 
break;
case 4:
 debugf ("blocks#1 "); this.$ = $$[$0]; 
break;
case 5:
 debugf ("blocks#2 "); this.$ = nodeAddSibling ($$[$0-1], $$[$0]); 
break;
case 6:
 debugf ("blocksintbl#1 "); this.$ = $$[$0]; 
break;
case 7:
 debugf ("blocksintbl#2 "); this.$ = nodeAddSibling ($$[$0-1], $$[$0]); 
break;
case 8:
 debugf ("block#1 "); this.$ = processPreBlock ($$[$0]); 
break;
case 9:
 debugf ("block#2 "); this.$ = $$[$0-1]; 
break;
case 10:
 debugf ("block#3 "); this.$ = $$[$0-1]; 
break;
case 11:
 debugf ("block#4 "); this.$ = $$[$0-1]; 
break;
case 12:
 debugf ("block#5 "); this.$ = $$[$0-1]; 
break;
case 13:
 debugf ("block#6 "); this.$ = $$[$0-1]; 
break;
case 14:
 debugf ("blockintbl#1 "); this.$ = processPreBlock ($$[$0]); 
break;
case 15:
 debugf ("blockintbl#2 "); this.$ = $$[$0-1]; 
break;
case 16:
 debugf ("blockintbl#3 "); this.$ = $$[$0-1]; 
break;
case 17:
 debugf ("blockintbl#4 "); this.$ = $$[$0-1]; 
break;
case 18:
 debugf ("blockintbl#5 "); this.$ = $$[$0-1]; 
break;
case 19:
 debugf ("blockintbl#6 "); this.$ = $$[$0-1]; 
break;
case 20:
 debugf ("heading#1 "); this.$ = nodeAddChild (newNode ('Heading', $$[$0-2]), $$[$0-1]); 
break;
case 21:
 debugf ("heading#2 "); this.$ = nodeAddChild (newNode ('Paragraph'), makeTextBlock (convertHeadingToText ($$[$0-1]), $$[$0])); 
break;
case 22:
 debugf ("heading#3 "); this.$ = nodeAddChild (newNode ('Paragraph'), convertHeadingToText ($$[$0])); 
break;
case 23:
 debugf ("preblock#1 "); this.$ = nodeAddChild (newNode ('PreBlock'), $$[$0]); 
break;
case 24:
 debugf ("preblock#2 "); this.$ = nodeAddChild ($$[$0-1], $$[$0]); 
break;
case 25:
 debugf ("preline#1 "); this.$ = nodeAddChild (newNode ('PreLine'), $$[$0-1], $$[$0]); 
break;
case 26:
 debugf ("listblock#1 "); this.$ = processListBlock ($$[$0]); 
break;
case 27:
 debugf ("listblock#2 "); this.$ = processListBlock ($$[$0]); 
break;
case 28:
 debugf ("listblock#3 "); this.$ = processListBlock ($$[$0]); 
break;
case 29:
 debugf ("bulletlistblock#1 "); this.$ = nodeAddChild (newNode ('ListBlock'), $$[$0]); 
break;
case 30:
 debugf ("bulletlistblock#2 "); this.$ = nodeAddChild ($$[$0-1], $$[$0]); 
break;
case 31:
 debugf ("numberlistblock#1 "); this.$ = nodeAddChild (newNode ('ListBlock'), $$[$0]); 
break;
case 32:
 debugf ("numberlistblock#2 "); this.$ = nodeAddChild ($$[$0-1], $$[$0]); 
break;
case 33:
 debugf ("identlistblock#1 "); this.$ = nodeAddChild (newNode ('ListBlock'), $$[$0]); 
break;
case 34:
 debugf ("identlistblock#2 "); this.$ = nodeAddChild ($$[$0-1], $$[$0]); 
break;
case 35:
 debugf ("bulletlistline#1 "); this.$ = nodeAddChild (nodePrependChild ($$[$0-2], newNode ('ListBullet')), $$[$0-1]); 
break;
case 36:
 debugf ("bulletlistline#2 "); this.$ = nodeAddChild (nodePrependChild ($$[$0-1], newNode ('ListBullet')), $$[$0]); 
break;
case 37:
 debugf ("numberlistline#1 "); this.$ = nodeAddChild (nodePrependChild ($$[$0-2], newNode ('ListNumbered')), $$[$0-1]); 
break;
case 38:
 debugf ("numberlistline#2 "); this.$ = nodeAddChild (nodePrependChild ($$[$0-1], newNode ('ListNumbered')), $$[$0]); 
break;
case 39:
 debugf ("identlistline#1 "); this.$ = nodeAddChild (nodePrependChild ($$[$0-2], newNode ('ListIdent')), $$[$0-1]); 
break;
case 40:
 debugf ("identlistline#2 "); this.$ = nodeAddChild (nodePrependChild ($$[$0-1], newNode ('ListIdent')), $$[$0]); 
break;
case 41:
 debugf ("listseries#1 "); this.$ = newNode ('ListLine'); 
break;
case 42:
 debugf ("listseries#2 "); this.$ = nodeAddChild (newNode ('ListLine'), newNode ('ListBullet')); 
break;
case 43:
 debugf ("listseries#3 "); this.$ = nodeAddChild (newNode ('ListLine'), newNode ('ListNumbered')); 
break;
case 44:
 debugf ("listseries#4 "); this.$ = nodeAddChild (newNode ('ListLine'), newNode ('ListIdent')); 
break;
case 45:
 debugf ("listseries#5 "); this.$ = nodeAddChild ($$[$0-1], newNode ('ListBullet')); 
break;
case 46:
 debugf ("listseries#6 "); this.$ = nodeAddChild ($$[$0-1], newNode ('ListNumbered')); 
break;
case 47:
 debugf ("listseries#6 "); this.$ = nodeAddChild ($$[$0-1], newNode ('ListIdent')); 
break;
case 50:
 debugf ("linketc#1 "); this.$ = nodeAddChild (newNode ('LinkEtc', 0), nodeAddChild (newNode ('LinkTarget'), $$[$0-1])); 
break;
case 51:
 debugf ("linketc#2 "); this.$ = nodeAddChild (newNode ('LinkEtc', 1), nodeAddChild (newNode ('LinkTarget'), $$[$0-2])); 
break;
case 52:
 debugf ("linketc#3 "); this.$ = nodeAddChild (newNode ('LinkEtc', 0), nodeAddChild (newNode ('LinkTarget'), $$[$0-2]), $$[$0-1]); 
break;
case 53:
 debugf ("linketc#4 "); this.$ = nodeAddChild (newNode ('LinkEtc', 1), nodeAddChild (newNode ('LinkTarget'), $$[$0-3]), $$[$0-2]); 
break;
case 54:
 debugf ("linketc#5 "); this.$ = nodeAddChild (newNode ('LinkEtc', 2), nodeAddChild (newNode ('LinkTarget'), $$[$0-1])); 
break;
case 55:
 debugf ("linketc#6 "); this.$ = nodeAddChild (newNode ('LinkEtc', 3), nodeAddChild (newNode ('LinkTarget'), $$[$0-2])); 
break;
case 56:
 debugf ("linketc#7 "); this.$ = nodeAddChild (newNode ('LinkEtc', 2), nodeAddChild (newNode ('LinkTarget'), $$[$0-2]), $$[$0-1]); 
break;
case 57:
 debugf ("linketc#8 "); this.$ = nodeAddChild (newNode ('LinkEtc', 3), nodeAddChild (newNode ('LinkTarget'), $$[$0-3]), $$[$0-2]); 
break;
case 58:
 debugf ("linketc#9 "); this.$ = makeTextBlock (newNode ('TextToken', "[["), $$[$0]); 
break;
case 59:
 debugf ("linketc#10 "); this.$ = makeTextBlock2 (newNode ('TextToken', "[["), $$[$0-1], newNode ('TextToken', "|")); 
break;
case 60:
 debugf ("linketc#11 "); this.$ = makeTextBlock2 (newNode ('TextToken', "[["), $$[$0-1], convertPipeSeriesToText ($$[$0])); 
break;
case 61:
 debugf ("linketc#12 "); this.$ = makeTextBlock3 (newNode ('TextToken', "[["), $$[$0-2], convertPipeSeriesToText ($$[$0-1]), newNode ('TextToken', "|")); 
break;
case 62:
 debugf ("linketc#13 "); this.$ = makeTextBlock (newNode ('TextToken', "[[:"), $$[$0]); 
break;
case 63:
 debugf ("linketc#14 "); this.$ = makeTextBlock2 (newNode ('TextToken', "[[:"), $$[$0-1], newNode ('TextToken', "|")); 
break;
case 64:
 debugf ("linketc#15 "); this.$ = makeTextBlock2 (newNode ('TextToken', "[[:"), $$[$0-1], convertPipeSeriesToText ($$[$0])); 
break;
case 65:
 debugf ("linketc#16 "); this.$ = makeTextBlock3 (newNode ('TextToken', "[[:"), $$[$0-2], convertPipeSeriesToText ($$[$0-1]), newNode ('TextToken', "|")); 
break;
case 66:
 debugf ("pipeseries#1 "); this.$ = nodeAddChild (newNode ('LinkOption'), $$[$0]); 
break;
case 67:
 debugf ("pipeseries#2 "); this.$ = nodeAddSibling ($$[$0-2], nodeAddChild (newNode ('LinkOption'), $$[$0])); 
break;
case 68:
 debugf ("textorempty#1 "); this.$ = newNode ('TextToken', ""); 
break;
case 69:
 debugf ("textorempty#2 "); this.$ = $$[$0]; 
break;
case 70:
 debugf ("italicsorbold#1 "); this.$ = nodeAddChild (newNode ('Italics'), $$[$0-1]); 
break;
case 71:
 debugf ("italicsorbold#2 "); this.$ = nodeAddChild (newNode ('Italics'),
                                makeTextBlock ($$[$0-3], nodeAddChild (newNode ('Bold'), $$[$0-1]))); 
break;
case 72:
 debugf ("italicsorbold#3 "); this.$ =
                        makeTextBlock2 (nodeAddChild (newNode ('Italics'), $$[$0-2]), newNode ('TextToken', "'"), $$[$0]); 
break;
case 73:
 debugf ("italicsorbold#4 "); this.$ = makeTextBlock (newNode ('TextToken', "''"), $$[$0]); 
break;
case 74:
 debugf ("italicsorbold#5 "); this.$ = nodeAddChild (newNode ('Bold'), $$[$0-1]); 
break;
case 75:
 debugf ("italicsorbold#6 "); this.$ = nodeAddChild (newNode ('Bold'),
                            makeTextBlock ($$[$0-3], nodeAddChild (newNode ('Italics'), $$[$0-1]))); 
break;
case 76:
 debugf ("italicsorbold#7 "); this.$ = processNestedItalics (makeTextBlock2 (newNode
                            (TextToken, "'"), nodeAddChild (newNode ('Italics'), $$[$0-2]), $$[$0])); 
break;
case 77:
 debugf ("italicsorbold#8 "); this.$ = processNestedItalics (makeTextBlock (newNode
                            (TextToken, "'"), nodeAddChild (newNode ('Italics'), $$[$0-1]))); 
break;
case 78:
 debugf ("italicsorbold#9 "); this.$ = makeTextBlock (newNode ('TextToken', "'''"), $$[$0]); 
break;
case 79:
 debugf ("italicsorbold#10 "); this.$ = nodeAddChild (newNode ('Italics'),
                            nodeAddChild (newNode ('Bold'), $$[$0-1])); 
break;
case 80:
 debugf ("italicsorbold#11 "); this.$ = nodeAddChild (newNode ('Italics'),
                            makeTextBlock (nodeAddChild (newNode ('Bold'), $$[$0-3]), $$[$0-1])); 
break;
case 81:
 debugf ("italicsorbold#12 "); this.$ = makeTextBlock2 (newNode ('TextToken', "''"),
                            nodeAddChild (newNode ('Bold'), $$[$0-2]), $$[$0]); 
break;
case 82:
 debugf ("italicsorbold#13 "); this.$ = makeTextBlock (newNode ('TextToken', "''"),
                            nodeAddChild (newNode ('Bold'), $$[$0-1])); 
break;
case 83:
 debugf ("italicsorbold#14 "); this.$ = nodeAddChild (newNode ('Bold'),
                            makeTextBlock (nodeAddChild (newNode ('Italics'), $$[$0-3]), $$[$0-1])); 
break;
case 84:
 debugf ("italicsorbold#15 "); this.$ = makeTextBlock2 (newNode ('TextToken', "'''"),
                            nodeAddChild (newNode ('Italics'), $$[$0-2]), $$[$0]); 
break;
case 85:
 debugf ("italicsorbold#16 "); this.$ = makeTextBlock (newNode ('TextToken', "'''"),
                            nodeAddChild (newNode ('Italics'), $$[$0-1])); 
break;
case 86:
 debugf ("italicsorbold#17 ");
                            this.$ = makeTextBlock (newNode ('TextToken', "'''''"), $$[$0]); 
break;
case 87:
 debugf ("italicsnobold#1 "); this.$ = nodeAddChild (newNode ('Italics'), $$[$0-1]); 
break;
case 88:
 debugf ("italicsnobold#2 "); this.$ = makeTextBlock (newNode ('TextToken', "''"), $$[$0]); 
break;
case 89:
 debugf ("boldnoitalics#1 "); this.$ = nodeAddChild (newNode ('Bold'), $$[$0-1]); 
break;
case 90:
 debugf ("boldnoitalics#2 "); this.$ = makeTextBlock (newNode ('TextToken', "'''"), $$[$0]); 
break;
case 91:
 debugf ("table#1 "); this.$ = nodeAddChild (newNode ('Table'), $$[$0-2], $$[$0-1]); 
break;
case 92:
 debugf ("table#2 "); this.$ = nodeAddChild (newNode ('Table'), $$[$0-1], $$[$0]); 
break;
case 93:
 debugf ("table#3 "); this.$ = nodeAddChild (newNode ('Table'), $$[$0-3], $$[$0-1]); 
break;
case 94:
 debugf ("table#4 "); this.$ = nodeAddChild (newNode ('Table'), $$[$0-2], $$[$0]); 
break;
case 95:
 debugf ("table#5 "); this.$ = nodeAddChild (newNode ('Table'), $$[$0-1]); 
break;
case 96:
 debugf ("table#6 "); this.$ = nodeAddChild (newNode ('Table'), $$[$0]); 
break;
case 97:
 debugf ("table#7 "); this.$ = nodeAddChild (newNode ('Table'), $$[$0-1]); 
break;
case 98:
 debugf ("table#8 "); this.$ = nodeAddChild (newNode ('Table'), $$[$0]); 
break;
case 99:
 debugf ("table#9 "); this.$ = nodeAddChild (newNode ('Paragraph'),
                            makeTextBlock (newNode ('TextToken', addSpaces ("{|", $$[$0-2])),
                                           convertAttributesToText ($$[$0-1]))); 
break;
case 100:
 debugf ("table#10 "); this.$ = nodeAddChild (newNode ('Paragraph'),
                            makeTextBlock2 (newNode ('TextToken', addSpaces ("{|", $$[$0-3])),
                                            convertAttributesToText ($$[$0-2]), $$[$0-1])); 
break;
case 101:
 debugf ("table#11 "); this.$ = nodeAddChild (newNode ('Paragraph'),
                            makeTextBlock (newNode ('TextToken', addSpaces ("{|", $$[$0-2])), $$[$0])); 
break;
case 102:
 debugf ("table#12 "); this.$ = nodeAddChild (newNode ('Paragraph'),
                            newNode ('TextToken', addSpaces ("{|", $$[$0-1]))); 
break;
case 103:
 debugf ("tablerows#1 "); this.$ = $$[$0]; 
break;
case 104:
 debugf ("tablerows#2 "); this.$ = nodeAddSibling ($$[$0-1], $$[$0]); 
break;
case 105:
 debugf ("tablerow#1 "); this.$ = nodeAddChild (newNode ('TableRow'), $$[$0-1], $$[$0]); 
break;
case 106:
 debugf ("tablerow#2 "); this.$ = nodeAddChild (newNode ('TableRow'), $$[$0]); 
break;
case 107:
 debugf ("tablerow#3 "); this.$ = nodeAddChild (newNode ('TableRow'), $$[$0-2], $$[$0]); 
break;
case 108:
 debugf ("tablerow#4 "); this.$ = nodeAddChild (newNode ('TableRow'), $$[$0]); 
break;
case 109:
 debugf ("tablerow#5 "); this.$ = nodeAddChild (newNode ('TableRow'), $$[$0]); 
break;
case 110:
 debugf ("tablerow#6 "); freeRecursivelyWithSiblings ($$[$0-1]); this.$ = 0; 
break;
case 111:
 debugf ("tablerow#7 "); freeRecursivelyWithSiblings ($$[$0]); this.$ = 0; 
break;
case 112:
 debugf ("tablerow#8 "); this.$ = 0; 
break;
case 113:
 debugf ("tablerow#9 "); this.$ = 0; 
break;
case 114:
 debugf ("tablerow#10 "); this.$ = $$[$0]; 
break;
case 115:
 debugf ("tablecells#1 "); this.$ = $$[$0]; 
break;
case 116:
 debugf ("tablecells#2 "); this.$ = nodeAddSibling ($$[$0-1], $$[$0]); 
break;
case 117:
 debugf ("tablecell#1 "); this.$ = nodeAddChild (newNode ('TableCell'), $$[$0-2], processTableCellContents ($$[$0])); 
break;
case 118:
 debugf ("tablecell#2 "); this.$ = nodeAddChild (newNode ('TableCell'), processTableCellContents ($$[$0])); 
break;
case 119:
 debugf ("tablecell#3 "); this.$ = nodeAddChild (newNode ('TableCell'), $$[$0-2]); 
break;
case 120:
 debugf ("tablecell#4 "); this.$ = nodeAddChild (newNode ('TableCell'), $$[$0-1]); 
break;
case 121:
 debugf ("tablecell#5 "); this.$ = newNode ('TableCell'); 
break;
case 122:
 debugf ("tablecell#6 "); this.$ = newNode ('TableCell'); 
break;
case 123:
 debugf ("tablecell#7 "); this.$ = nodeAddChild (newNode ('TableHead'), $$[$0-2], processTableCellContents ($$[$0])); 
break;
case 124:
 debugf ("tablecell#8 "); this.$ = nodeAddChild (newNode ('TableHead'), processTableCellContents ($$[$0])); 
break;
case 125:
 debugf ("tablecell#9 "); this.$ = nodeAddChild (newNode ('TableHead'), $$[$0-2]); 
break;
case 126:
 debugf ("tablecell#10 "); this.$ = nodeAddChild (newNode ('TableHead'), $$[$0-1]); 
break;
case 127:
 debugf ("tablecell#11 "); this.$ = newNode ('TableHead'); 
break;
case 128:
 debugf ("tablecell#12 "); this.$ = newNode ('TableHead'); 
break;
case 129:
 debugf ("tablecellcontents#1 "); this.$ = $$[$0]; 
break;
case 130:
 debugf ("tablecellcontents#2 "); this.$ = $$[$0]; 
break;
case 131:
 debugf ("tablecaption#1 "); this.$ = nodeAddChild (newNode ('TableCaption'), $$[$0-2], $$[$0]); 
break;
case 132:
 debugf ("tablecaption#2 "); this.$ = nodeAddChild (newNode ('TableCaption'), makeTextBlock (convertAttributesToText ($$[$0-1]), $$[$0])); 
break;
case 133:
 debugf ("tablecaption#3 "); this.$ = nodeAddChild (newNode ('TableCaption'), $$[$0]); 
break;
case 134:
 debugf ("tablecaption#4 "); this.$ = nodeAddChild (newNode ('TableCaption'), makeTextBlock (convertAttributesToText ($$[$0-1]), newNode ('TextToken', "|"))); 
break;
case 135:
 debugf ("tablecaption#5 "); this.$ = nodeAddChild (newNode ('TableCaption'), convertAttributesToText ($$[$0])); 
break;
case 136:
 debugf ("tablecaption#6 "); this.$ = 0; 
break;
case 137:
 debugf ("attribute#1 "); this.$ = newNodeA (0, $$[$0], 0, 0); 
break;
case 138:
 debugf ("attribute#2 "); this.$ = nodeAddChild (newNodeA (1, $$[$0-2], $$[$0-1], strtrimNC ($$[$0])), $$[$0]); 
break;
case 139:
 debugf ("attribute#3 "); this.$ = nodeAddChild (newNodeA (2, $$[$0-4], $$[$0-3], $$[$0]), $$[$0-1]); 
break;
case 140:
 debugf ("attribute#4 "); this.$ = nodeAddChild (newNodeA (3, $$[$0-4], $$[$0-3], $$[$0]), $$[$0-1]); 
break;
case 141:
 debugf ("attribute#5 "); this.$ = newNodeA (3, $$[$0-3], $$[$0-2], $$[$0]); 
break;
case 142:
 debugf ("attribute#6 "); this.$ = newNodeA (1, $$[$0-1], $$[$0], 0); 
break;
case 143:
 debugf ("attributes#1 "); this.$ = nodeAddChild (newNode ('AttributeGroup'), $$[$0]); 
break;
case 144:
 debugf ("attributes#2 "); this.$ = nodeAddChild ($$[$0-1], $$[$0]); 
break;
case 145:
 debugf ("text#1 "); this.$ = $$[$0]; 
break;
case 146:
 debugf ("text#2 "); this.$ = makeTextBlock ($$[$0-1], $$[$0]); 
break;
case 147:
 debugf ("textnoital#1 "); this.$ = $$[$0]; 
break;
case 148:
 debugf ("textnoital#2 "); this.$ = makeTextBlock ($$[$0-1], $$[$0]); 
break;
case 149:
 debugf ("textnobold#1 "); this.$ = $$[$0]; 
break;
case 150:
 debugf ("textnobold#2 "); this.$ = makeTextBlock ($$[$0-1], $$[$0]); 
break;
case 151:
 debugf ("textnoboit#1 "); this.$ = $$[$0]; 
break;
case 152:
 debugf ("textnoboit#2 "); this.$ = makeTextBlock ($$[$0-1], $$[$0]); 
break;
case 153:
 debugf ("textintbl#1 "); this.$ = $$[$0]; 
break;
case 154:
 debugf ("textintbl#2 "); this.$ = makeTextBlock ($$[$0-1], $$[$0]); 
break;
case 155:
 debugf ("textinlink#1 "); this.$ = $$[$0]; 
break;
case 156:
 debugf ("textinlink#2 "); this.$ = makeTextBlock ($$[$0-1], $$[$0]); 
break;
case 157:
 debugf ("textintmpl#1 "); this.$ = $$[$0]; 
break;
case 158:
 debugf ("textintmpl#2 "); this.$ = makeTextBlock ($$[$0-1], $$[$0]); 
break;
case 159:
 debugf ("textelement#1 "); this.$ = $$[$0]; 
break;
case 160:
 debugf ("textelement#2 "); this.$ = $$[$0]; 
break;
case 161:
 debugf ("textelement#3 "); this.$ = newNode ('TextToken', "|"); 
break;
case 162:
 debugf ("textelement#4 "); this.$ = newNode ('TextToken', "]]"); 
break;
case 163:
 debugf ("textelement#5 "); this.$ = newNode ('TextToken', "''"); 
break;
case 164:
 debugf ("textelement#6 "); this.$ = newNode ('TextToken', "'''"); 
break;
case 165:
 debugf ("textelement#7 "); this.$ = newNode ('TextToken', "'''''"); 
break;
case 166:
 debugf ("textelement#8 "); this.$ = newNode ('TextToken', addSpaces ("=", $$[$0])); 
break;
case 167:
 debugf ("textelement#9 "); this.$ = newNode ('TextToken', addSpaces ("    {|", $$[$0])); 
break;
case 168:
 debugf ("textelement#10 "); this.$ = newNode ('TextToken', "|}"); 
break;
case 169:
 debugf ("textelement#11 "); this.$ = convertTableRowToText ($$[$0]); 
break;
case 170:
 debugf ("textelement#12 "); this.$ = convertTableCellToText ($$[$0]); 
break;
case 171:
 debugf ("textelement#13 "); this.$ = convertTableHeadToText ($$[$0]); 
break;
case 172:
 debugf ("textelement#14 "); this.$ = convertTableCaptionToText ($$[$0]); 
break;
case 173:
 debugf ("textelement#15 "); this.$ = convertAttributeDataToText ($$[$0]); 
break;
case 174:
 debugf ("textelement#16 "); this.$ = newNode ('TextToken', "}}}}}"); 
break;
case 175:
 debugf ("textelement#17 "); this.$ = newNode ('TextToken', "}}}"); 
break;
case 176:
 debugf ("textelement#18 "); this.$ = newNode ('TextToken', "}}"); 
break;
case 177:
 debugf ("textelement#19 "); this.$ = $$[$0]; 
break;
case 179:
 debugf ("textelement#20 "); this.$ = $$[$0]; 
break;
case 180:
 debugf ("textelement#21 "); this.$ = $$[$0]; 
break;
case 181:
 debugf ("textelement#22 "); this.$ = $$[$0]; 
break;
case 182:
 debugf ("textelement#23 "); this.$ = $$[$0]; 
break;
case 183:
 debugf ("textelementnoital#1 "); this.$ = $$[$0]; 
break;
case 184:
 debugf ("textelementnoital#2 "); this.$ = $$[$0]; 
break;
case 185:
 debugf ("textelementnoital#3 "); this.$ = newNode ('TextToken', "|"); 
break;
case 186:
 debugf ("textelementnoital#4 "); this.$ = newNode ('TextToken', "]]"); 
break;
case 187:
 debugf ("textelementnoital#5 "); this.$ = newNode ('TextToken', addSpaces ("    {|", $$[$0])); 
break;
case 188:
 debugf ("textelementnoital#6 "); this.$ = newNode ('TextToken', "|}"); 
break;
case 189:
 debugf ("textelementnoital#7 "); this.$ = convertTableRowToText ($$[$0]); 
break;
case 190:
 debugf ("textelementnoital#8 "); this.$ = convertTableCellToText ($$[$0]); 
break;
case 191:
 debugf ("textelementnoital#9 "); this.$ = convertTableHeadToText ($$[$0]); 
break;
case 192:
 debugf ("textelementnoital#10 "); this.$ = convertTableCaptionToText ($$[$0]); 
break;
case 193:
 debugf ("textelementnoital#11 "); this.$ = convertAttributeDataToText ($$[$0]); 
break;
case 194:
 debugf ("textelementnoital#12 "); this.$ = newNode ('TextToken', "}}}}}"); 
break;
case 195:
 debugf ("textelementnoital#13 "); this.$ = newNode ('TextToken', "}}}"); 
break;
case 196:
 debugf ("textelementnoital#14 "); this.$ = newNode ('TextToken', "}}"); 
break;
case 197:
 debugf ("textelementnoital#15 "); this.$ = $$[$0]; 
break;
case 198:
 debugf ("textelementnoital#16 "); this.$ = $$[$0]; 
break;
case 199:
 debugf ("textelementnoital#17 "); this.$ = $$[$0]; 
break;
case 200:
 debugf ("textelementnoital#18 "); this.$ = $$[$0]; 
break;
case 201:
 debugf ("textelementnoital#19 "); this.$ = $$[$0]; 
break;
case 202:
 debugf ("textelementnobold#1 "); this.$ = $$[$0]; 
break;
case 203:
 debugf ("textelementnobold#2 "); this.$ = $$[$0]; 
break;
case 204:
 debugf ("textelementnobold#3 "); this.$ = newNode ('TextToken', "|"); 
break;
case 205:
 debugf ("textelementnobold#4 "); this.$ = newNode ('TextToken', "]]"); 
break;
case 206:
 debugf ("textelementnobold#5 "); this.$ = newNode ('TextToken', addSpaces ("    {|", $$[$0])); 
break;
case 207:
 debugf ("textelementnobold#6 "); this.$ = newNode ('TextToken', "|}"); 
break;
case 208:
 debugf ("textelementnobold#7 "); this.$ = convertTableRowToText ($$[$0]); 
break;
case 209:
 debugf ("textelementnobold#8 "); this.$ = convertTableCellToText ($$[$0]); 
break;
case 210:
 debugf ("textelementnobold#9 "); this.$ = convertTableHeadToText ($$[$0]); 
break;
case 211:
 debugf ("textelementnobold#10 "); this.$ = convertTableCaptionToText ($$[$0]); 
break;
case 212:
 debugf ("textelementnobold#11 "); this.$ = convertAttributeDataToText ($$[$0]); 
break;
case 213: case 232:
 debugf ("textelementnobold#12 "); this.$ = newNode ('TextToken', "}}}}}"); 
break;
case 214: case 233:
 debugf ("textelementnobold#13 "); this.$ = newNode ('TextToken', "}}}"); 
break;
case 215: case 234:
 debugf ("textelementnobold#14 "); this.$ = newNode ('TextToken', "}}"); 
break;
case 216:
 debugf ("textelementnobold#15 "); this.$ = $$[$0]; 
break;
case 217:
 debugf ("textelementnobold#16 "); this.$ = $$[$0]; 
break;
case 218:
 debugf ("textelementnobold#17 "); this.$ = $$[$0]; 
break;
case 219:
 debugf ("textelementnobold#18 "); this.$ = $$[$0]; 
break;
case 220:
 debugf ("textelementnobold#19 "); this.$ = $$[$0]; 
break;
case 221:
 debugf ("textelementnoboit#1 "); this.$ = $$[$0]; 
break;
case 222:
 debugf ("textelementnoboit#2 "); this.$ = $$[$0]; 
break;
case 223:
 debugf ("textelementnoboit#3 "); this.$ = newNode ('TextToken', "|"); 
break;
case 224:
 debugf ("textelementnoboit#4 "); this.$ = newNode ('TextToken', "]]"); 
break;
case 225:
 debugf ("textelementnoboit#5 "); this.$ = newNode ('TextToken', addSpaces ("    {|", $$[$0])); 
break;
case 226:
 debugf ("textelementnoboit#6 "); this.$ = newNode ('TextToken', "|}"); 
break;
case 227:
 debugf ("textelementnoboit#7 "); this.$ = convertTableRowToText ($$[$0]); 
break;
case 228:
 debugf ("textelementnoboit#8 "); this.$ = convertTableCellToText ($$[$0]); 
break;
case 229:
 debugf ("textelementnoboit#9 "); this.$ = convertTableHeadToText ($$[$0]); 
break;
case 230:
 debugf ("textelementnoboit#10 "); this.$ = convertTableCaptionToText ($$[$0]); 
break;
case 231:
 debugf ("textelementnoboit#11 "); this.$ = convertAttributeDataToText ($$[$0]); 
break;
case 235:
 debugf ("textelementnoboit#15 "); this.$ = $$[$0]; 
break;
case 236:
 debugf ("textelementnoboit#16 "); this.$ = $$[$0]; 
break;
case 237:
 debugf ("textelementnoboit#17 "); this.$ = $$[$0]; 
break;
case 238:
 debugf ("textelementnoboit#18 "); this.$ = $$[$0]; 
break;
case 239:
 debugf ("textelementintbl#1 "); this.$ = $$[$0]; 
break;
case 240:
 debugf ("textelementintbl#2 "); this.$ = $$[$0]; 
break;
case 241:
 debugf ("textelementintbl#3 "); this.$ = newNode ('TextToken', "|"); 
break;
case 242:
 debugf ("textelementintbl#4 "); this.$ = newNode ('TextToken', "]]"); 
break;
case 243:
 debugf ("textelementintbl#5 "); this.$ = newNode ('TextToken', "''"); 
break;
case 244:
 debugf ("textelementintbl#6 "); this.$ = newNode ('TextToken', "'''"); 
break;
case 245:
 debugf ("textelementintbl#7 "); this.$ = newNode ('TextToken', "'''''"); 
break;
case 246:
 debugf ("textelementintbl#8 "); this.$ = newNode ('TextToken', addSpaces ("=", $$[$0])); 
break;
case 247:
 debugf ("textelementintbl#9 "); this.$ = newNode ('TextToken', "}}}}}"); 
break;
case 248:
 debugf ("textelementintbl#10 "); this.$ = newNode ('TextToken', "}}}"); 
break;
case 249:
 debugf ("textelementintbl#11 "); this.$ = newNode ('TextToken', "}}"); 
break;
case 250:
 debugf ("textelementintbl#12 "); this.$ = $$[$0]; 
break;
case 251:
 debugf ("textelementintbl#13 "); this.$ = $$[$0]; 
break;
case 252:
 debugf ("textelementintbl#14 "); this.$ = $$[$0]; 
break;
case 253:
 debugf ("textelementintbl#15 "); this.$ = $$[$0]; 
break;
case 254:
 debugf ("textelementintbl#16 "); this.$ = $$[$0]; 
break;
case 255:
 debugf ("textelementinlink#1 "); this.$ = $$[$0]; 
break;
case 256:
 debugf ("textelementinlink#2 "); this.$ = $$[$0]; 
break;
case 257:
 debugf ("textelementinlink#3 "); this.$ = newNode ('TextToken', "''"); 
break;
case 258:
 debugf ("textelementinlink#4 "); this.$ = newNode ('TextToken', "'''"); 
break;
case 259:
 debugf ("textelementinlink#5 "); this.$ = newNode ('TextToken', "'''''"); 
break;
case 260:
 debugf ("textelementinlink#6 "); this.$ = newNode ('TextToken', addSpaces ("=", $$[$0])); 
break;
case 261:
 debugf ("textelementinlink#7 "); this.$ = newNode ('TextToken', addSpaces ("    {|", $$[$0])); 
break;
case 262:
 debugf ("textelementinlink#8 "); this.$ = newNode ('TextToken', "|}"); 
break;
case 263:
 debugf ("textelementinlink#9 "); this.$ = convertTableRowToText ($$[$0]); 
break;
case 264:
 debugf ("textelementinlink#10 "); this.$ = convertTableCellToText ($$[$0]); 
break;
case 265:
 debugf ("textelementinlink#11 "); this.$ = convertTableHeadToText ($$[$0]); 
break;
case 266:
 debugf ("textelementinlink#12 "); this.$ = convertTableCaptionToText ($$[$0]); 
break;
case 267:
 debugf ("textelementinlink#13 "); this.$ = convertAttributeDataToText ($$[$0]); 
break;
case 268:
 debugf ("textelementinlink#14 "); this.$ = newNode ('TextToken', "}}}}}"); 
break;
case 269:
 debugf ("textelementinlink#15 "); this.$ = newNode ('TextToken', "}}}"); 
break;
case 270:
 debugf ("textelementinlink#16 "); this.$ = newNode ('TextToken', "}}"); 
break;
case 271:
 debugf ("textelementinlink#17 "); this.$ = $$[$0]; 
break;
case 272:
 debugf ("textelementinlink#18 "); this.$ = $$[$0]; 
break;
case 273:
 debugf ("textelementinlink#19 "); this.$ = $$[$0]; 
break;
case 274:
 debugf ("textelementinlink#20 "); this.$ = $$[$0]; 
break;
case 275:
 debugf ("textelementinlink#21 "); this.$ = $$[$0]; 
break;
case 276:
 debugf ("textelementintmpl#1 "); this.$ = $$[$0]; 
break;
case 277:
 debugf ("textelementintmpl#2 "); this.$ = $$[$0]; 
break;
case 278:
 debugf ("textelementintmpl#3 "); this.$ = newNode ('TextToken', "|"); 
break;
case 279:
 debugf ("textelementintmpl#4 "); this.$ = newNode ('TextToken', "]]"); 
break;
case 280:
 debugf ("textelementintmpl#5 "); this.$ = newNode ('TextToken', "''"); 
break;
case 281:
 debugf ("textelementintmpl#6 "); this.$ = newNode ('TextToken', "'''"); 
break;
case 282:
 debugf ("textelementintmpl#7 "); this.$ = newNode ('TextToken', "'''''"); 
break;
case 283:
 debugf ("textelementintmpl#8 "); this.$ = newNode ('TextToken', addSpaces ("=", $$[$0])); 
break;
case 284:
 debugf ("textelementintmpl#9 "); this.$ = newNode ('TextToken', addSpaces ("    {|", $$[$0])); 
break;
case 285:
 debugf ("textelementintmpl#10 "); this.$ = newNode ('TextToken', "|}"); 
break;
case 286:
 debugf ("textelementintmpl#11 "); this.$ = convertTableRowToText ($$[$0]); 
break;
case 287:
 debugf ("textelementintmpl#12 "); this.$ = convertTableCellToText ($$[$0]); 
break;
case 288:
 debugf ("textelementintmpl#13 "); this.$ = convertTableHeadToText ($$[$0]); 
break;
case 289:
 debugf ("textelementintmpl#14 "); this.$ = convertTableCaptionToText ($$[$0]); 
break;
case 290:
 debugf ("textelementintmpl#15 "); this.$ = convertAttributeDataToText ($$[$0]); 
break;
case 291:
 debugf ("textelementintmpl#16 "); this.$ = $$[$0]; 
break;
case 292:
 debugf ("textelementintmpl#17 "); this.$ = $$[$0]; 
break;
case 293:
 debugf ("textelementintmpl#18 "); this.$ = $$[$0]; 
break;
case 294:
 debugf ("textelementintmpl#19 "); this.$ = $$[$0]; 
break;
case 295:
 debugf ("textelementintmpl#20 "); this.$ = $$[$0]; 
break;
case 305:
 debugf ("templatevar#1 "); this.$ = nodeAddChild (newNode ('TemplateVar'), $$[$0-1]); 
break;
case 306:
 debugf ("templatevar#2 "); this.$ =
                                nodeAddChild (newNode ('Template'), nodeAddChild (newNode ('TemplateVar'), $$[$0-1])); 
break;
case 307:
 debugf ("templatevar#1 "); this.$ = makeTextBlock (newNode ('TextToken', "{{{"), $$[$0]); 
break;
case 308:
 debugf ("templatevar#2 "); this.$ = makeTextBlock (newNode ('TextToken', "{{{{{"), $$[$0]); 
break;
case 309:
 debugf ("zeroormorenewlines#1 "); this.$ = 0; 
break;
case 310:
 debugf ("zeroormorenewlines#2 "); this.$ = 0; 
break;
case 311:
 debugf ("oneormorenewlines#1 "); this.$ = 0; 
break;
case 312:
 debugf ("oneormorenewlines#2 "); this.$ = 0; 
break;
case 313:
 debugf ("zeroormorenewlinessave#1 "); this.$ = 0; 
break;
case 314:
 debugf ("zeroormorenewlinessave#2 "); this.$ = $$[$0]; 
break;
case 315:
 debugf ("oneormorenewlinessave#1 "); this.$ = newNode ('Newlines', 0); 
break;
case 316:
 debugf ("oneormorenewlinessave#2 "); /*$$[$0-1]->data.num++;*/ this.$ = $$[$0-1]; 
break;
case 317:
 debugf ("paragraph#1 "); this.$ = nodeAddChild (newNode ('Paragraph'), $$[$0-1]); 
break;
case 318:
 debugf ("paragraph#2 "); this.$ = nodeAddChild ($$[$0-2], newNode ('TextToken', " "), $$[$0-1]); 
break;
case 319:
 debugf ("paragraph#3 "); this.$ = nodeAddChild (newNode ('Paragraph'), $$[$0]); 
break;
case 320:
 debugf ("paragraph#4 "); this.$ = nodeAddChild ($$[$0-1], newNode ('TextToken', " "), $$[$0]); 
break;
case 321:
 debugf ("paragraphintbl#1 "); this.$ = nodeAddChild (newNode ('Paragraph'), $$[$0-1]); 
break;
case 322:
 debugf ("paragraphintbl#4 "); this.$ = nodeAddChild ($$[$0-2], newNode ('TextToken', " "), $$[$0-1]); 
break;
case 323:
 debugf ("paragraphintbl#7 "); this.$ = nodeAddChild (newNode ('Paragraph'), $$[$0]); 
break;
case 324:
 debugf ("paragraphintbl#10 "); this.$ = nodeAddChild ($$[$0-1], newNode ('TextToken', " "), $$[$0]); 
break;
case 325:
 debugf ("comment#1 "); this.$ = nodeAddChild (newNode ('Comment'), $$[$0-1]); 
break;
case 326:
 debugf ("comment#2 "); this.$ = newNode ('Comment'); 
break;
}
},
table: [{1:[2,1],3:1,4:2,5:3,6:5,9:6,10:7,12:8,13:9,14:10,15:11,17:$V0,18:17,20:12,21:$V1,24:14,25:15,26:16,27:21,28:22,29:23,30:$V2,32:$V3,33:$V4,34:$V5,36:$V6,37:45,38:$V7,41:46,42:$V8,43:$V9,45:$Va,46:47,47:$Vb,49:$Vc,51:$Vd,55:$Ve,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,75:24,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:48,88:49,90:$Vr,91:$Vs,92:$Vt,94:$Vu},{1:[3]},{1:[2,2],32:$Vv},{1:[2,3],6:57,9:6,10:7,12:8,13:9,14:10,15:11,17:$V0,18:17,20:12,21:$V1,24:14,25:15,26:16,27:21,28:22,29:23,30:$V2,33:$V4,34:$V5,36:$V6,37:45,38:$V7,41:46,42:$V8,43:$V9,45:$Va,46:47,47:$Vb,49:$Vc,51:$Vd,55:$Ve,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,75:24,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:48,88:49,90:$Vr,91:$Vs,92:$Vt,94:$Vu},o($Vw,[2,311]),o($Vx,[2,4]),o([1,17,30,33,34,36,38,42,43,45,47,49,51,55,58,60,64,66,67,70,71,72,83,84,85,86,90,91,92,94],[2,8],{20:58,21:$V1}),o($Vx,$Vy,{11:59,4:60,32:$V3}),o($Vx,$Vy,{4:60,11:61,32:$V3}),o($Vz,$Vy,{75:24,37:45,41:46,46:47,87:48,88:49,4:60,11:62,18:63,15:65,32:$V3,36:$V6,38:$V7,42:$V8,43:$V9,45:$Va,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vx,$Vy,{4:60,11:66,32:$V3}),o($Vx,$VB,{4:60,11:67,32:$V3}),o($Vw,[2,23]),o($VC,[2,22],{75:24,37:45,41:46,46:47,87:48,88:49,15:65,18:68,36:$V6,38:$V7,42:$V8,43:$V9,45:$Va,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o([1,17,21,32,33,34,36,38,42,43,45,47,49,51,55,58,60,64,66,67,70,71,72,83,84,85,86,90,91,92,94],[2,26],{27:69,30:$V2}),o([1,17,21,30,32,34,36,38,42,43,45,47,49,51,55,58,60,64,66,67,70,71,72,83,84,85,86,90,91,92,94],[2,27],{28:70,33:$V4}),o([1,17,21,30,32,33,36,38,42,43,45,47,49,51,55,58,60,64,66,67,70,71,72,83,84,85,86,90,91,92,94],[2,28],{29:71,34:$V5}),o($Vz,[2,319],{37:45,41:46,46:47,87:48,88:49,15:65,75:73,32:[1,72],36:$V6,38:$V7,42:$V8,43:$V9,45:$Va,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vz,$VD,{75:24,37:45,41:46,46:47,87:48,88:49,15:65,56:74,57:75,4:76,18:77,69:78,59:79,61:82,62:83,63:87,32:$V3,36:$V6,38:$V7,42:$V8,43:$V9,45:$Va,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$VE,64:$VF,66:$VG,67:$VH,70:$VI,71:$Vl,72:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),{15:65,18:88,36:$V6,37:45,38:$V7,41:46,42:$V8,43:$V9,45:$Va,46:47,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,75:24,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:48,88:49,90:$Vr,91:$Vs,92:$Vt,94:$Vu,95:[1,89]},o($VC,$VJ,{75:24,37:45,41:46,46:47,87:48,88:49,15:65,22:90,18:91,36:$V6,38:$V7,42:$V8,43:$V9,45:$Va,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw,[2,29]),o($Vw,[2,31]),o($Vw,[2,33]),o($VK,[2,145]),o($VL,$VM,{31:92,30:$VN,33:$VO,34:$VP}),o($VL,$VM,{31:96,30:$VN,33:$VO,34:$VP}),o($VL,$VM,{31:97,30:$VN,33:$VO,34:$VP}),o($VK,[2,159]),o($VK,[2,160]),o($VK,[2,161]),o($VK,[2,162]),o([1,17,19,21,30,32,33,34,38,47,51,71,73,74,95],[2,163],{48:98,76:99,15:114,41:115,54:116,87:117,88:118,36:$VQ,42:$V8,43:$VR,45:$Va,49:$VS,55:$VT,58:$VU,60:$VV,64:$VW,66:$VX,67:$VY,70:$VZ,72:$V_,83:$V$,84:$V01,85:$V11,86:$V21,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o([1,17,19,21,30,32,33,34,38,49,51,71,73,74,95],[2,164],{52:120,77:121,15:136,41:137,53:138,87:139,88:140,36:$V31,42:$V8,43:$V41,45:$Va,47:$V51,55:$V61,58:$V71,60:$V81,64:$V91,66:$Va1,67:$Vb1,70:$Vc1,72:$Vd1,83:$Ve1,84:$Vf1,85:$Vg1,86:$Vh1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o([1,17,19,21,30,32,33,34,38,47,49,51,71,73,74,95],[2,165],{50:142,78:143,15:158,41:159,87:160,88:161,36:$Vi1,42:$V8,43:$Vj1,45:$Va,55:$Vk1,58:$Vl1,60:$Vm1,64:$Vn1,66:$Vo1,67:$Vp1,70:$Vq1,72:$Vr1,83:$Vs1,84:$Vt1,85:$Vu1,86:$Vv1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VK,[2,166]),o($VK,[2,168]),o($VK,[2,169]),o($VK,$Vw1),o($VK,$Vx1),o($VK,$Vy1),o($VK,[2,173]),o($VK,[2,174]),o($VK,[2,175]),o($VK,[2,176]),o($VK,[2,178]),o($VK,[2,179]),o($VK,[2,180]),o($VK,[2,181]),o($VK,[2,182]),{15:180,39:162,41:181,42:$V8,45:$Va,46:182,47:$Vz1,49:$VA1,51:$VB1,55:$VC1,58:$VD1,60:$VE1,64:$VF1,66:$VG1,67:$VH1,70:$VI1,71:$VJ1,72:$VK1,80:163,83:$VL1,84:$VM1,85:$VN1,86:$VO1,87:183,88:184,90:$Vr,91:$Vs,92:$Vt,94:$Vu},{15:180,39:185,41:181,42:$V8,45:$Va,46:182,47:$Vz1,49:$VA1,51:$VB1,55:$VC1,58:$VD1,60:$VE1,64:$VF1,66:$VG1,67:$VH1,70:$VI1,71:$VJ1,72:$VK1,80:163,83:$VL1,84:$VM1,85:$VN1,86:$VO1,87:183,88:184,90:$Vr,91:$Vs,92:$Vt,94:$Vu},{15:180,39:186,41:181,42:$V8,45:$Va,46:182,47:$Vz1,49:$VA1,51:$VB1,55:$VC1,58:$VD1,60:$VE1,64:$VF1,66:$VG1,67:$VH1,70:$VI1,71:$VJ1,72:$VK1,80:163,83:$VL1,84:$VM1,85:$VN1,86:$VO1,87:183,88:184,90:$Vr,91:$Vs,92:$Vt,94:$Vu},{15:205,21:$VP1,32:$VQ1,36:$VR1,41:206,42:$V8,43:$VS1,45:$Va,46:207,47:$VT1,49:$VU1,51:$VV1,55:$VW1,58:$VX1,60:$VY1,64:$VZ1,66:$V_1,67:$V$1,70:[1,188],71:$V02,72:$V12,81:189,82:190,83:$V22,87:208,88:209,89:187,90:$Vr,91:$Vs,92:$Vt,94:$Vu},{15:205,21:$VP1,32:$VQ1,36:$VR1,41:206,42:$V8,43:$VS1,45:$Va,46:207,47:$VT1,49:$VU1,51:$VV1,55:$VW1,58:$VX1,60:$VY1,64:$VZ1,66:$V_1,67:$V$1,70:$V32,71:$V02,72:$V12,81:212,82:190,83:$V22,87:208,88:209,90:$Vr,91:$Vs,92:$Vt,94:$Vu},{15:205,21:$VP1,32:$VQ1,36:$VR1,41:206,42:$V8,43:$VS1,45:$Va,46:207,47:$VT1,49:$VU1,51:$VV1,55:$VW1,58:$VX1,60:$VY1,64:$VZ1,66:$V_1,67:$V$1,70:$V32,71:$V02,72:$V12,81:214,82:190,83:$V22,87:208,88:209,90:$Vr,91:$Vs,92:$Vt,94:$Vu},o($Vw,[2,312]),o($Vx,[2,5]),o($Vw,[2,24]),o($Vx,[2,9]),o($Vx,$V42,{32:$Vv}),o($Vx,[2,10]),o($Vx,[2,11]),o($Vz,[2,320],{37:45,41:46,46:47,87:48,88:49,15:65,75:73,32:[1,215],36:$V6,38:$V7,42:$V8,43:$V9,45:$Va,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VK,$VD),o($VK,$VB),o($Vx,[2,12]),o($Vx,[2,13]),o($VC,[2,21],{37:45,41:46,46:47,87:48,88:49,15:65,75:73,19:[1,216],36:$V6,38:$V7,42:$V8,43:$V9,45:$Va,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw,[2,30]),o($Vw,[2,32]),o($Vw,[2,34]),o($Vw,[2,317]),o($VK,[2,146]),o($Vz,$Vy,{75:24,37:45,41:46,46:47,87:48,88:49,15:65,59:79,61:82,62:83,63:87,57:217,4:218,11:219,18:220,69:221,32:$V3,36:$V6,38:$V7,42:$V8,43:$V9,45:$Va,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$VE,64:$VF,66:$VG,67:$VH,70:$VI,71:$Vl,72:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($V52,[2,96],{61:82,62:83,63:87,59:223,58:[1,222],60:$V62,64:$V72,66:$V82,67:$V92}),o($Va2,[2,102],{59:79,61:82,62:83,63:87,57:228,32:$Vv,60:$V62,64:$V72,66:$V82,67:$V92}),o($Vz,$Vy,{37:45,41:46,46:47,87:48,88:49,4:60,15:65,75:73,11:229,32:$V3,36:$V6,38:$V7,42:$V8,43:$V9,45:$Va,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw,[2,143]),o($Vw,[2,103]),o($Vb2,$Vc2,{71:$Vd2}),o($Ve2,$Vf2,{69:78,63:87,56:231,61:232,4:233,32:$V3,64:$V72,66:$V82,70:$Vg2}),o($Vh2,[2,109],{63:235,64:$V72,66:$V82}),o($Vw,[2,114]),o($Vi2,$Vw1,{20:12,24:14,25:15,26:16,27:21,28:22,29:23,69:78,56:236,65:237,4:238,7:239,8:240,9:241,10:242,12:243,16:244,14:245,15:246,68:247,79:249,41:261,46:262,87:263,88:264,17:$V0,21:$V1,30:$V2,32:$V3,33:$V4,34:$V5,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,55:$Vo2,70:$Vg2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vi2,$Vx1,{20:12,24:14,25:15,26:16,27:21,28:22,29:23,69:78,7:239,8:240,9:241,10:242,12:243,16:244,14:245,15:246,68:247,79:249,41:261,46:262,87:263,88:264,56:265,65:266,4:267,17:$V0,21:$V1,30:$V2,32:$V3,33:$V4,34:$V5,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,55:$Vo2,70:$Vg2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vv2,$Vy1,{69:78,79:249,41:261,46:262,87:263,88:264,56:268,68:269,15:270,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,70:$Vg2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw,[2,115]),{15:65,36:$V6,37:45,38:$V7,41:46,42:$V8,43:$V9,45:$Va,46:47,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,75:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:48,88:49,90:$Vr,91:$Vs,92:$Vt,94:$Vu,95:[1,271]},o($Vw2,[2,326]),o($Vx,[2,313],{23:272,93:273,32:[1,274]}),o($VC,[2,69],{37:45,41:46,46:47,87:48,88:49,15:65,75:73,36:$V6,38:$V7,42:$V8,43:$V9,45:$Va,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vx2,$VJ,{75:24,37:45,41:46,46:47,87:48,88:49,15:65,18:91,22:275,30:$Vy2,33:$Vz2,34:$VA2,36:$V6,38:$V7,42:$V8,43:$V9,45:$Va,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw,[2,42]),o($Vw,[2,43]),o($Vw,[2,44]),o($Vx2,$VJ,{75:24,37:45,41:46,46:47,87:48,88:49,15:65,18:91,22:279,30:$Vy2,33:$Vz2,34:$VA2,36:$V6,38:$V7,42:$V8,43:$V9,45:$Va,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vx2,$VJ,{75:24,37:45,41:46,46:47,87:48,88:49,15:65,18:91,22:280,30:$Vy2,33:$Vz2,34:$VA2,36:$V6,38:$V7,42:$V8,43:$V9,45:$Va,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VB2,[2,73],{15:114,41:115,54:116,87:117,88:118,76:283,36:$VQ,42:$V8,43:$VR,45:$Va,47:[1,281],49:[1,282],55:$VT,58:$VU,60:$VV,64:$VW,66:$VX,67:$VY,70:$VZ,72:$V_,83:$V$,84:$V01,85:$V11,86:$V21,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,147]),o($Vw2,[2,183]),o($Vw2,[2,184]),o($Vw2,[2,185]),o($Vw2,[2,186]),o($Vw2,[2,187]),o($Vw2,[2,188]),o($Vw2,[2,189]),o($Vw2,[2,190]),o($Vw2,[2,191]),o($Vw2,[2,192]),o($Vw2,[2,193]),o($Vw2,[2,194]),o($Vw2,[2,195]),o($Vw2,[2,196]),o($Vw2,[2,197]),o($Vw2,[2,198]),o($Vw2,[2,199]),o($Vw2,[2,200]),o($Vw2,[2,201]),{15:158,36:$Vi1,41:159,42:$V8,43:$Vj1,45:$Va,50:284,55:$Vk1,58:$Vl1,60:$Vm1,64:$Vn1,66:$Vo1,67:$Vp1,70:$Vq1,72:$Vr1,78:143,83:$Vs1,84:$Vt1,85:$Vu1,86:$Vv1,87:160,88:161,90:$Vr,91:$Vs,92:$Vt,94:$Vu},o($VB2,[2,78],{15:136,41:137,53:138,87:139,88:140,77:287,36:$V31,42:$V8,43:$V41,45:$Va,47:[1,286],49:[1,285],55:$V61,58:$V71,60:$V81,64:$V91,66:$Va1,67:$Vb1,70:$Vc1,72:$Vd1,83:$Ve1,84:$Vf1,85:$Vg1,86:$Vh1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,149]),o($Vw2,[2,202]),o($Vw2,[2,203]),o($Vw2,[2,204]),o($Vw2,[2,205]),o($Vw2,[2,206]),o($Vw2,[2,207]),o($Vw2,[2,208]),o($Vw2,[2,209]),o($Vw2,[2,210]),o($Vw2,[2,211]),o($Vw2,[2,212]),o($Vw2,[2,213]),o($Vw2,[2,214]),o($Vw2,[2,215]),o($Vw2,[2,216]),o($Vw2,[2,217]),o($Vw2,[2,218]),o($Vw2,[2,219]),o($Vw2,[2,220]),{15:158,36:$Vi1,41:159,42:$V8,43:$Vj1,45:$Va,50:288,55:$Vk1,58:$Vl1,60:$Vm1,64:$Vn1,66:$Vo1,67:$Vp1,70:$Vq1,72:$Vr1,78:143,83:$Vs1,84:$Vt1,85:$Vu1,86:$Vv1,87:160,88:161,90:$Vr,91:$Vs,92:$Vt,94:$Vu},o([1,17,19,21,30,32,33,34,38,40,71,73,74,95],[2,86],{15:158,41:159,87:160,88:161,78:292,36:$Vi1,42:$V8,43:$Vj1,45:$Va,47:[1,291],49:[1,290],51:[1,289],55:$Vk1,58:$Vl1,60:$Vm1,64:$Vn1,66:$Vo1,67:$Vp1,70:$Vq1,72:$Vr1,83:$Vs1,84:$Vt1,85:$Vu1,86:$Vv1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,151]),o($Vw2,[2,221]),o($Vw2,[2,222]),o($Vw2,[2,223]),o($Vw2,[2,224]),o($Vw2,[2,225]),o($Vw2,[2,226]),o($Vw2,[2,227]),o($Vw2,[2,228]),o($Vw2,[2,229]),o($Vw2,[2,230]),o($Vw2,[2,231]),o($Vw2,[2,232]),o($Vw2,[2,233]),o($Vw2,[2,234]),o($Vw2,[2,235]),o($Vw2,[2,236]),o($Vw2,[2,237]),o($Vw2,[2,238]),{15:180,40:[1,293],41:181,42:$V8,45:$Va,46:182,47:$Vz1,49:$VA1,51:$VB1,55:$VC1,58:$VD1,60:$VE1,64:$VF1,66:$VG1,67:$VH1,70:$VI1,71:$VJ1,72:$VK1,80:294,83:$VL1,84:$VM1,85:$VN1,86:$VO1,87:183,88:184,90:$Vr,91:$Vs,92:$Vt,94:$Vu},o($Vw2,[2,155]),o($Vw2,[2,255]),o($Vw2,[2,256]),o($VC2,[2,257],{48:98,76:99,15:114,41:115,54:116,87:117,88:118,36:$VQ,42:$V8,43:$VR,45:$Va,49:$VS,55:$VT,58:$VU,60:$VV,64:$VW,66:$VX,67:$VY,70:$VZ,72:$V_,83:$V$,84:$V01,85:$V11,86:$V21,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VD2,[2,258],{52:120,77:121,15:136,41:137,53:138,87:139,88:140,36:$V31,42:$V8,43:$V41,45:$Va,47:$V51,55:$V61,58:$V71,60:$V81,64:$V91,66:$Va1,67:$Vb1,70:$Vc1,72:$Vd1,83:$Ve1,84:$Vf1,85:$Vg1,86:$Vh1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VE2,[2,259],{50:142,78:143,15:158,41:159,87:160,88:161,36:$Vi1,42:$V8,43:$Vj1,45:$Va,55:$Vk1,58:$Vl1,60:$Vm1,64:$Vn1,66:$Vo1,67:$Vp1,70:$Vq1,72:$Vr1,83:$Vs1,84:$Vt1,85:$Vu1,86:$Vv1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,260]),o($Vw2,[2,261]),o($Vw2,[2,262]),o($Vw2,[2,263]),o($Vw2,[2,264]),o($Vw2,[2,265]),o($Vw2,[2,266]),o($Vw2,[2,267]),o($Vw2,[2,268]),o($Vw2,[2,269]),o($Vw2,[2,270]),o($Vw2,[2,271]),o($Vw2,[2,272]),o($Vw2,[2,273]),o($Vw2,[2,274]),o($Vw2,[2,275]),o($VF2,[2,58],{15:180,41:181,46:182,87:183,88:184,80:294,35:295,44:297,36:$VG2,42:$V8,43:[1,296],45:$Va,47:$Vz1,49:$VA1,51:$VB1,55:$VC1,58:$VD1,60:$VE1,64:$VF1,66:$VG1,67:$VH1,70:$VI1,71:$VJ1,72:$VK1,83:$VL1,84:$VM1,85:$VN1,86:$VO1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VF2,[2,62],{15:180,41:181,46:182,87:183,88:184,80:294,35:299,44:301,36:$VG2,42:$V8,43:[1,300],45:$Va,47:$Vz1,49:$VA1,51:$VB1,55:$VC1,58:$VD1,60:$VE1,64:$VF1,66:$VG1,67:$VH1,70:$VI1,71:$VJ1,72:$VK1,83:$VL1,84:$VM1,85:$VN1,86:$VO1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),{43:[1,303],86:[1,302]},o([21,32,36,42,43,45,47,49,51,55,58,60,64,66,67,70,72,83,86,90,91,92,94],$VH2,{71:[1,304]}),{15:205,21:$VP1,32:$VQ1,36:$VR1,41:206,42:$V8,43:$VS1,45:$Va,46:207,47:$VT1,49:$VU1,51:$VV1,55:$VW1,58:$VX1,60:$VY1,64:$VZ1,66:$V_1,67:$V$1,70:$V32,71:$V02,72:$V12,82:305,83:$V22,86:[2,303],87:208,88:209,90:$Vr,91:$Vs,92:$Vt,94:$Vu},o($Vw2,[2,157]),o($Vw2,[2,276]),o($Vw2,[2,277]),o($Vw2,[2,278]),o($Vw2,[2,279]),o($VC2,[2,280],{48:98,76:99,15:114,41:115,54:116,87:117,88:118,36:$VQ,42:$V8,43:$VR,45:$Va,49:$VS,55:$VT,58:$VU,60:$VV,64:$VW,66:$VX,67:$VY,70:$VZ,72:$V_,83:$V$,84:$V01,85:$V11,86:$V21,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VD2,[2,281],{52:120,77:121,15:136,41:137,53:138,87:139,88:140,36:$V31,42:$V8,43:$V41,45:$Va,47:$V51,55:$V61,58:$V71,60:$V81,64:$V91,66:$Va1,67:$Vb1,70:$Vc1,72:$Vd1,83:$Ve1,84:$Vf1,85:$Vg1,86:$Vh1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VE2,[2,282],{50:142,78:143,15:158,41:159,87:160,88:161,36:$Vi1,42:$V8,43:$Vj1,45:$Va,55:$Vk1,58:$Vl1,60:$Vm1,64:$Vn1,66:$Vo1,67:$Vp1,70:$Vq1,72:$Vr1,83:$Vs1,84:$Vt1,85:$Vu1,86:$Vv1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,283]),o($Vw2,[2,284]),o($Vw2,[2,285]),o($Vw2,[2,286]),o($Vw2,[2,287]),o($Vw2,[2,288]),o($Vw2,[2,289]),o($Vw2,[2,291]),o($Vw2,[2,292]),o($Vw2,[2,293]),o($Vw2,[2,294]),o($Vw2,[2,295]),o($Vw2,[2,297]),o($Vw2,[2,298]),o([1,17,19,30,33,34,38,40,73,74,84,86,95],[2,307],{15:205,41:206,46:207,87:208,88:209,82:305,21:$VP1,32:$VQ1,36:$VR1,42:$V8,43:$VS1,45:$Va,47:$VT1,49:$VU1,51:$VV1,55:$VW1,58:$VX1,60:$VY1,64:$VZ1,66:$V_1,67:$V$1,70:$V32,71:$V02,72:$V12,83:$V22,85:[1,306],90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,$VH2),o([1,17,19,30,33,34,38,40,73,74,85,86,95],[2,308],{15:205,41:206,46:207,87:208,88:209,82:305,21:$VP1,32:$VQ1,36:$VR1,42:$V8,43:$VS1,45:$Va,47:$VT1,49:$VU1,51:$VV1,55:$VW1,58:$VX1,60:$VY1,64:$VZ1,66:$V_1,67:$V$1,70:$V32,71:$V02,72:$V12,83:$V22,84:[1,307],90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw,[2,318]),o($Vw,[2,20]),o($V52,[2,92],{61:82,62:83,63:87,59:223,58:[1,308],60:$V62,64:$V72,66:$V82,67:$V92}),o($Va2,$V42,{59:79,61:82,62:83,63:87,57:309,32:$Vv,60:$V62,64:$V72,66:$V82,67:$V92}),o($Vw,[2,99]),o($Vz,$Vy,{37:45,41:46,46:47,87:48,88:49,4:60,15:65,75:73,11:310,32:$V3,36:$V6,38:$V7,42:$V8,43:$V9,45:$Va,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw,[2,144]),o($Vw,[2,95]),o($Vw,[2,104]),o($Ve2,$Vf2,{69:78,63:87,56:231,61:232,4:233,32:$V3,64:$V72,66:$V82,70:$Vg2}),o($Vv2,[2,136],{69:78,79:249,41:261,46:262,87:263,88:264,56:268,68:269,15:270,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,70:$Vg2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vi2,[2,122],{20:12,24:14,25:15,26:16,27:21,28:22,29:23,69:78,56:236,65:237,4:238,7:239,8:240,9:241,10:242,12:243,16:244,14:245,15:246,68:247,79:249,41:261,46:262,87:263,88:264,17:$V0,21:$V1,30:$V2,32:$V3,33:$V4,34:$V5,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,55:$Vo2,70:$Vg2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vi2,[2,128],{20:12,24:14,25:15,26:16,27:21,28:22,29:23,69:78,7:239,8:240,9:241,10:242,12:243,16:244,14:245,15:246,68:247,79:249,41:261,46:262,87:263,88:264,56:265,65:266,4:267,17:$V0,21:$V1,30:$V2,32:$V3,33:$V4,34:$V5,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,55:$Vo2,70:$Vg2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($V52,[2,98],{61:82,62:83,63:87,59:223,58:[1,311],60:$V62,64:$V72,66:$V82,67:$V92}),o($Vw,[2,101]),o([1,17,21,30,32,33,34,36,38,42,43,45,47,49,51,55,58,60,64,66,67,70,71,83,84,85,86,90,91,92,94],[2,142],{72:[1,312],73:[1,313],74:[1,314]}),o($Ve2,[2,111],{63:87,69:221,61:315,4:316,32:$V3,64:$V72,66:$V82,70:$Vg2}),o($Vh2,[2,106],{63:235,64:$V72,66:$V82}),o($VI2,[2,112],{63:87,61:317,32:$Vv,64:$V72,66:$V82}),o($Vb2,$Vc2,{71:$Vd2}),o($Vw,[2,116]),{43:[1,318],69:221,70:$Vg2},o($Vw,[2,118]),o($VJ2,[2,121],{20:12,24:14,25:15,26:16,27:21,28:22,29:23,8:240,9:241,10:242,12:243,16:244,14:245,15:246,68:247,79:249,41:261,46:262,87:263,88:264,7:319,17:$V0,21:$V1,30:$V2,32:$Vv,33:$V4,34:$V5,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,55:$Vo2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VK2,[2,129],{20:12,24:14,25:15,26:16,27:21,28:22,29:23,9:241,10:242,12:243,16:244,14:245,15:246,68:247,79:249,41:261,46:262,87:263,88:264,8:320,17:$V0,21:$V1,30:$V2,33:$V4,34:$V5,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,55:$Vo2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw,[2,6]),o([1,17,30,32,33,34,36,38,42,43,45,47,49,51,55,58,60,64,66,67,70,71,72,83,84,85,86,90,91,92,94],[2,14],{20:58,21:$V1}),o($Vx,$Vy,{4:60,11:321,32:$V3}),o($Vx,$Vy,{4:60,11:322,32:$V3}),o($VL2,$Vy,{4:60,79:249,41:261,46:262,87:263,88:264,15:270,11:323,68:324,32:$V3,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vx,$Vy,{4:60,11:325,32:$V3}),o($Vx,$VM2,{4:60,11:326,32:$V3}),o($VL2,[2,323],{41:261,46:262,87:263,88:264,15:270,79:328,32:[1,327],36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),{4:76,15:65,18:77,32:$V3,36:$V6,37:45,38:$V7,41:46,42:$V8,43:$V9,45:$Va,46:47,47:$Vb,49:$Vc,51:$Vd,55:$VA,56:74,57:75,58:$Vf,59:79,60:$VE,61:82,62:83,63:87,64:$VF,66:$VG,67:$VH,69:78,70:$VI,71:$Vl,72:$Vm,75:24,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:48,88:49,90:$Vr,91:$Vs,92:$Vt,94:$Vu},o($Vw,[2,153]),o($Vw,[2,239]),o($Vw,[2,240]),o($Vw,[2,241]),o($Vw,[2,242]),o([1,17,21,30,32,33,34,38,47,51,71],[2,243],{48:98,76:99,15:114,41:115,54:116,87:117,88:118,36:$VQ,42:$V8,43:$VR,45:$Va,49:$VS,55:$VT,58:$VU,60:$VV,64:$VW,66:$VX,67:$VY,70:$VZ,72:$V_,83:$V$,84:$V01,85:$V11,86:$V21,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o([1,17,21,30,32,33,34,38,49,51,71],[2,244],{52:120,77:121,15:136,41:137,53:138,87:139,88:140,36:$V31,42:$V8,43:$V41,45:$Va,47:$V51,55:$V61,58:$V71,60:$V81,64:$V91,66:$Va1,67:$Vb1,70:$Vc1,72:$Vd1,83:$Ve1,84:$Vf1,85:$Vg1,86:$Vh1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o([1,17,21,30,32,33,34,38,47,49,51,71],[2,245],{50:142,78:143,15:158,41:159,87:160,88:161,36:$Vi1,42:$V8,43:$Vj1,45:$Va,55:$Vk1,58:$Vl1,60:$Vm1,64:$Vn1,66:$Vo1,67:$Vp1,70:$Vq1,72:$Vr1,83:$Vs1,84:$Vt1,85:$Vu1,86:$Vv1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw,[2,246]),o($Vw,[2,247]),o($Vw,[2,248]),o($Vw,[2,249]),o($Vw,[2,251]),o($Vw,[2,252]),o($Vw,[2,253]),o($Vw,[2,254]),{43:[1,329],69:221,70:$Vg2},o($Vw,[2,124]),o($VJ2,[2,127],{20:12,24:14,25:15,26:16,27:21,28:22,29:23,8:240,9:241,10:242,12:243,16:244,14:245,15:246,68:247,79:249,41:261,46:262,87:263,88:264,7:319,17:$V0,21:$V1,30:$V2,32:$Vv,33:$V4,34:$V5,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,55:$Vo2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vv2,[2,135],{69:221,79:249,41:261,46:262,87:263,88:264,15:270,68:331,36:$Vj2,42:$V8,43:[1,330],45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,70:$Vg2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VN2,[2,133],{41:261,46:262,87:263,88:264,15:270,79:328,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw,$VM2),o($Vw2,[2,325]),o($Vw,[2,25]),o($Vx,[2,314],{32:[1,332]}),o($Vw,[2,315]),o($Vx,[2,36],{32:[1,333]}),o($Vw,[2,45]),o($Vw,[2,46]),o($Vw,[2,47]),o($Vx,[2,38],{32:[1,334]}),o($Vx,[2,40],{32:[1,335]}),o($Vw2,[2,70]),{15:158,36:$Vi1,41:159,42:$V8,43:$Vj1,45:$Va,50:336,55:$Vk1,58:$Vl1,60:$Vm1,64:$Vn1,66:$Vo1,67:$Vp1,70:$Vq1,72:$Vr1,78:143,83:$Vs1,84:$Vt1,85:$Vu1,86:$Vv1,87:160,88:161,90:$Vr,91:$Vs,92:$Vt,94:$Vu},o($Vw2,[2,148]),o($VC2,[2,90],{15:158,41:159,87:160,88:161,78:292,36:$Vi1,42:$V8,43:$Vj1,45:$Va,49:$VO2,55:$Vk1,58:$Vl1,60:$Vm1,64:$Vn1,66:$Vo1,67:$Vp1,70:$Vq1,72:$Vr1,83:$Vs1,84:$Vt1,85:$Vu1,86:$Vv1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,74]),o($VE2,[2,77],{78:143,15:158,41:159,87:160,88:161,50:338,36:$Vi1,42:$V8,43:$Vj1,45:$Va,55:$Vk1,58:$Vl1,60:$Vm1,64:$Vn1,66:$Vo1,67:$Vp1,70:$Vq1,72:$Vr1,83:$Vs1,84:$Vt1,85:$Vu1,86:$Vv1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,150]),o($VD2,[2,88],{15:158,41:159,87:160,88:161,78:292,36:$Vi1,42:$V8,43:$Vj1,45:$Va,47:$VP2,55:$Vk1,58:$Vl1,60:$Vm1,64:$Vn1,66:$Vo1,67:$Vp1,70:$Vq1,72:$Vr1,83:$Vs1,84:$Vt1,85:$Vu1,86:$Vv1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,79]),o($VC2,[2,82],{76:99,15:114,41:115,54:116,87:117,88:118,48:340,36:$VQ,42:$V8,43:$VR,45:$Va,49:$VS,55:$VT,58:$VU,60:$VV,64:$VW,66:$VX,67:$VY,70:$VZ,72:$V_,83:$V$,84:$V01,85:$V11,86:$V21,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VD2,[2,85],{77:121,15:136,41:137,53:138,87:139,88:140,52:341,36:$V31,42:$V8,43:$V41,45:$Va,47:$V51,55:$V61,58:$V71,60:$V81,64:$V91,66:$Va1,67:$Vb1,70:$Vc1,72:$Vd1,83:$Ve1,84:$Vf1,85:$Vg1,86:$Vh1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,152]),o($VK,[2,49]),o($Vw2,[2,156]),o($Vw2,[2,50]),o($VQ2,[2,59],{80:163,15:180,41:181,46:182,87:183,88:184,35:342,39:343,36:$VG2,42:$V8,45:$Va,47:$Vz1,49:$VA1,51:$VB1,55:$VC1,58:$VD1,60:$VE1,64:$VF1,66:$VG1,67:$VH1,70:$VI1,71:$VJ1,72:$VK1,83:$VL1,84:$VM1,85:$VN1,86:$VO1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VR2,[2,60],{35:344,36:$VG2,43:[1,345]}),o($Vw2,[2,48]),o($Vw2,[2,54]),o($VQ2,[2,63],{80:163,15:180,41:181,46:182,87:183,88:184,39:343,35:346,36:$VG2,42:$V8,45:$Va,47:$Vz1,49:$VA1,51:$VB1,55:$VC1,58:$VD1,60:$VE1,64:$VF1,66:$VG1,67:$VH1,70:$VI1,71:$VJ1,72:$VK1,83:$VL1,84:$VM1,85:$VN1,86:$VO1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VR2,[2,64],{35:347,36:$VG2,43:[1,348]}),o($Vw2,[2,304]),o($VS2,[2,299]),{15:205,21:$VP1,32:$VQ1,36:$VR1,41:206,42:$V8,43:$VS1,45:$Va,46:207,47:$VT1,49:$VU1,51:$VV1,55:$VW1,58:$VX1,60:$VY1,64:$VZ1,66:$V_1,67:$V$1,70:$V32,71:$V02,72:$V12,73:[1,351],74:[1,350],81:349,82:190,83:$V22,87:208,88:209,90:$Vr,91:$Vs,92:$Vt,94:$Vu},o($Vw2,[2,158]),o($Vw2,[2,305]),o($Vw2,[2,306]),o($Vw,[2,91]),o($V52,[2,94],{61:82,62:83,63:87,59:223,58:[1,352],60:$V62,64:$V72,66:$V82,67:$V92}),o($Vw,[2,100]),o($Vw,[2,97]),o($Vw,[2,138]),{15:65,18:353,36:$V6,37:45,38:$V7,41:46,42:$V8,43:$V9,45:$Va,46:47,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,75:24,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:48,88:49,90:$Vr,91:$Vs,92:$Vt,94:$Vu},{15:65,18:354,36:$V6,37:45,38:$V7,41:46,42:$V8,43:$V9,45:$Va,46:47,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,74:[1,355],75:24,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:48,88:49,90:$Vr,91:$Vs,92:$Vt,94:$Vu},o($Vh2,[2,105],{63:235,64:$V72,66:$V82}),o($VI2,[2,110],{63:87,61:356,32:$Vv,64:$V72,66:$V82}),o($Vh2,[2,108],{63:235,64:$V72,66:$V82}),o($VJ2,[2,120],{20:12,24:14,25:15,26:16,27:21,28:22,29:23,7:239,8:240,9:241,10:242,12:243,16:244,14:245,15:246,68:247,79:249,41:261,46:262,87:263,88:264,65:357,4:358,17:$V0,21:$V1,30:$V2,32:$V3,33:$V4,34:$V5,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,55:$Vo2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VK2,[2,130],{20:12,24:14,25:15,26:16,27:21,28:22,29:23,9:241,10:242,12:243,16:244,14:245,15:246,68:247,79:249,41:261,46:262,87:263,88:264,8:320,17:$V0,21:$V1,30:$V2,33:$V4,34:$V5,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,55:$Vo2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw,[2,7]),o($Vw,[2,15]),o($Vw,[2,16]),o($Vw,[2,17]),o($VL2,[2,324],{41:261,46:262,87:263,88:264,15:270,79:328,32:[1,359],36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw,[2,18]),o($Vw,[2,19]),o($Vw,[2,321]),o($Vw,[2,154]),o($VJ2,[2,126],{20:12,24:14,25:15,26:16,27:21,28:22,29:23,7:239,8:240,9:241,10:242,12:243,16:244,14:245,15:246,68:247,79:249,41:261,46:262,87:263,88:264,65:360,4:361,17:$V0,21:$V1,30:$V2,32:$V3,33:$V4,34:$V5,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,55:$Vo2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VN2,[2,134],{79:249,41:261,46:262,87:263,88:264,15:270,68:362,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VN2,[2,132],{41:261,46:262,87:263,88:264,15:270,79:328,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw,[2,316]),o($Vw,[2,35]),o($Vw,[2,37]),o($Vw,[2,39]),o([1,17,19,21,30,32,33,34,38,40,47,71,73,74,95],[2,72],{15:158,41:159,87:160,88:161,78:292,36:$Vi1,42:$V8,43:$Vj1,45:$Va,49:$VO2,51:[1,363],55:$Vk1,58:$Vl1,60:$Vm1,64:$Vn1,66:$Vo1,67:$Vp1,70:$Vq1,72:$Vr1,83:$Vs1,84:$Vt1,85:$Vu1,86:$Vv1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,89]),o([1,17,19,21,30,32,33,34,38,40,49,71,73,74,95],[2,76],{15:158,41:159,87:160,88:161,78:292,36:$Vi1,42:$V8,43:$Vj1,45:$Va,47:$VP2,51:[1,364],55:$Vk1,58:$Vl1,60:$Vm1,64:$Vn1,66:$Vo1,67:$Vp1,70:$Vq1,72:$Vr1,83:$Vs1,84:$Vt1,85:$Vu1,86:$Vv1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,87]),o($VB2,[2,81],{15:114,41:115,54:116,87:117,88:118,76:283,36:$VQ,42:$V8,43:$VR,45:$Va,47:[1,365],49:$VS,55:$VT,58:$VU,60:$VV,64:$VW,66:$VX,67:$VY,70:$VZ,72:$V_,83:$V$,84:$V01,85:$V11,86:$V21,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VB2,[2,84],{15:136,41:137,53:138,87:139,88:140,77:287,36:$V31,42:$V8,43:$V41,45:$Va,47:$V51,49:[1,366],55:$V61,58:$V71,60:$V81,64:$V91,66:$Va1,67:$Vb1,70:$Vc1,72:$Vd1,83:$Ve1,84:$Vf1,85:$Vg1,86:$Vh1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,51]),o($VT2,[2,66],{15:180,41:181,46:182,87:183,88:184,80:294,42:$V8,45:$Va,47:$Vz1,49:$VA1,51:$VB1,55:$VC1,58:$VD1,60:$VE1,64:$VF1,66:$VG1,67:$VH1,70:$VI1,71:$VJ1,72:$VK1,83:$VL1,84:$VM1,85:$VN1,86:$VO1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,52]),o($VQ2,[2,61],{80:163,15:180,41:181,46:182,87:183,88:184,35:367,39:368,36:$VG2,42:$V8,45:$Va,47:$Vz1,49:$VA1,51:$VB1,55:$VC1,58:$VD1,60:$VE1,64:$VF1,66:$VG1,67:$VH1,70:$VI1,71:$VJ1,72:$VK1,83:$VL1,84:$VM1,85:$VN1,86:$VO1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,55]),o($Vw2,[2,56]),o($VQ2,[2,65],{80:163,15:180,41:181,46:182,87:183,88:184,39:368,35:369,36:$VG2,42:$V8,45:$Va,47:$Vz1,49:$VA1,51:$VB1,55:$VC1,58:$VD1,60:$VE1,64:$VF1,66:$VG1,67:$VH1,70:$VI1,71:$VJ1,72:$VK1,83:$VL1,84:$VM1,85:$VN1,86:$VO1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),{15:205,21:$VP1,32:$VQ1,36:$VR1,41:206,42:$V8,43:$VS1,45:$Va,46:207,47:$VT1,49:$VU1,51:$VV1,55:$VW1,58:$VX1,60:$VY1,64:$VZ1,66:$V_1,67:$V$1,70:$V32,71:$V02,72:$V12,82:305,83:$V22,86:[2,300],87:208,88:209,90:$Vr,91:$Vs,92:$Vt,94:$Vu},{15:205,21:$VP1,32:$VQ1,36:$VR1,41:206,42:$V8,43:$VS1,45:$Va,46:207,47:$VT1,49:$VU1,51:$VV1,55:$VW1,58:$VX1,60:$VY1,64:$VZ1,66:$V_1,67:$V$1,70:$V32,71:$V02,72:$V12,81:370,82:190,83:$V22,87:208,88:209,90:$Vr,91:$Vs,92:$Vt,94:$Vu},{15:205,21:$VP1,32:$VQ1,36:$VR1,41:206,42:$V8,43:$VS1,45:$Va,46:207,47:$VT1,49:$VU1,51:$VV1,55:$VW1,58:$VX1,60:$VY1,64:$VZ1,66:$V_1,67:$V$1,70:$V32,71:$V02,72:$V12,81:371,82:190,83:$V22,87:208,88:209,90:$Vr,91:$Vs,92:$Vt,94:$Vu},o($Vw,[2,93]),{15:65,36:$V6,37:45,38:$V7,41:46,42:$V8,43:$V9,45:$Va,46:47,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,73:[1,372],75:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:48,88:49,90:$Vr,91:$Vs,92:$Vt,94:$Vu},{15:65,36:$V6,37:45,38:$V7,41:46,42:$V8,43:$V9,45:$Va,46:47,47:$Vb,49:$Vc,51:$Vd,55:$VA,58:$Vf,60:$Vg,64:$Vh,66:$Vi,67:$Vj,70:$Vk,71:$Vl,72:$Vm,74:[1,373],75:73,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:48,88:49,90:$Vr,91:$Vs,92:$Vt,94:$Vu},o($Vw,[2,141]),o($Vh2,[2,107],{63:235,64:$V72,66:$V82}),o($Vw,[2,117]),o($VJ2,[2,119],{20:12,24:14,25:15,26:16,27:21,28:22,29:23,8:240,9:241,10:242,12:243,16:244,14:245,15:246,68:247,79:249,41:261,46:262,87:263,88:264,7:319,17:$V0,21:$V1,30:$V2,32:$Vv,33:$V4,34:$V5,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,55:$Vo2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw,[2,322]),o($Vw,[2,123]),o($VJ2,[2,125],{20:12,24:14,25:15,26:16,27:21,28:22,29:23,8:240,9:241,10:242,12:243,16:244,14:245,15:246,68:247,79:249,41:261,46:262,87:263,88:264,7:319,17:$V0,21:$V1,30:$V2,32:$Vv,33:$V4,34:$V5,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,55:$Vo2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($VN2,[2,131],{41:261,46:262,87:263,88:264,15:270,79:328,36:$Vj2,42:$V8,43:$Vk2,45:$Va,47:$Vl2,49:$Vm2,51:$Vn2,71:$Vp2,72:$Vq2,83:$Vr2,84:$Vs2,85:$Vt2,86:$Vu2,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,71]),o($Vw2,[2,75]),o($Vw2,[2,80]),o($Vw2,[2,83]),o($Vw2,[2,53]),o($VT2,[2,67],{15:180,41:181,46:182,87:183,88:184,80:294,42:$V8,45:$Va,47:$Vz1,49:$VA1,51:$VB1,55:$VC1,58:$VD1,60:$VE1,64:$VF1,66:$VG1,67:$VH1,70:$VI1,71:$VJ1,72:$VK1,83:$VL1,84:$VM1,85:$VN1,86:$VO1,90:$Vr,91:$Vs,92:$Vt,94:$Vu}),o($Vw2,[2,57]),{15:205,21:$VP1,32:$VQ1,36:$VR1,41:206,42:$V8,43:$VS1,45:$Va,46:207,47:$VT1,49:$VU1,51:$VV1,55:$VW1,58:$VX1,60:$VY1,64:$VZ1,66:$V_1,67:$V$1,70:$V32,71:$V02,72:$V12,74:[1,374],82:305,83:$V22,87:208,88:209,90:$Vr,91:$Vs,92:$Vt,94:$Vu},{15:205,21:$VP1,32:$VQ1,36:$VR1,41:206,42:$V8,43:$VS1,45:$Va,46:207,47:$VT1,49:$VU1,51:$VV1,55:$VW1,58:$VX1,60:$VY1,64:$VZ1,66:$V_1,67:$V$1,70:$V32,71:$V02,72:$V12,73:[1,375],82:305,83:$V22,87:208,88:209,90:$Vr,91:$Vs,92:$Vt,94:$Vu},o($Vw,[2,139]),o($Vw,[2,140]),o($VS2,[2,301]),o($VS2,[2,302])],
defaultActions: {},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    function nodePrependChild(node, child){
      node.children.splice(0,0,child); 
      child.parent = node;
      return node;
    }

    function debugf(msg,  a1, a2, a3, a4){
        console.log(msg, a1, a2, a3, a4);
    }

    function nodeAddChild(node, child) {
        if (!child){
            debugf("NOT A CHILD!!!");
            return;
        }
        if (!node){
            debugf("NOT A PARENT!!!");
            return;
        }
        node.children.push(child);
        child.parent = node;
        return node;
    }
    function nodeAddSibling(node,sibling) {
        if (!node){
            debugf("NOT A NODE!!!");
            return;
        }

        nodeAddChild(node.parent, sibling);
    }

    function newNode (nodeName, value) {
        return  {
            name:nodeName,
            value:value,
            text:null,
            children:[],
            parent: null
        }
    }
    function makeTextBlock(){
        return "TEXT BLOCK :)";
    }

    function convertAttributeDataToText(){
        return "TEXT :) ";
    }

    function processPreBlock() {
        return "PREBLOCK :)";
    }
    function processListBlock() {
        return "LIST BLOCK :)";
    }
    function addSpaces() {
        return "SPACES ADDED :)";
    }


function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}